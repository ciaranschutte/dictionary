{"schemas":{"sample_registration":{"updated":{"specimen_type":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      const row = $row;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      \r\n      const designation = row.tumour_normal_designation.trim().toLowerCase();\r\n      const specimen_type = $field.trim().toLowerCase();\r\n      \r\n      if (designation === \"normal\"){\r\n          const validTypes = [\"normal\", \"normal - tissue adjacent to primary tumour\", \"cell line - derived from normal\"];\r\n          if (!validTypes.includes(specimen_type)){\r\n              result = {valid: false, message: \"Invalid specimen_type. Specimen_type can only be set to a normal type value (Normal, Normal - tissue adjacent to primary tumour, or Cell line - derived from normal) when tumour_normal_designation is set to Normal.\"};\r\n          }\r\n      }\r\n      else if (designation === \"tumour\") {\r\n          const invalidTypes = [\"normal\", \"cell line - derived from normal\"];\r\n          if (invalidTypes.includes(specimen_type)){\r\n              result = {valid: false, message: \"Invalid specimen_type. Specimen_type cannot be set to normal type value (Normal or Cell line - derived from normal) when tumour_normal_designation is set to Tumour.\"};\r\n          }\r\n      }\r\n      return result;\r\n    })"],"right":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n     \r\n      if ($row.tumour_normal_designation != null && $row.specimen_type != null) { \r\n         const designation = $row.tumour_normal_designation.trim().toLowerCase();\r\n         const specimen_type = $field.trim().toLowerCase();\r\n      \r\n         if (designation === \"normal\") {\r\n            const validTypes = [\"normal\", \"normal - tissue adjacent to primary tumour\", \"cell line - derived from normal\"];\r\n            if (!validTypes.includes(specimen_type)) {\r\n               result = {valid: false, message: \"Invalid specimen_type. Specimen_type can only be set to a normal type value (Normal, Normal - tissue adjacent to primary tumour, or Cell line - derived from normal) when the 'tumour_normal_designation' field is set to Normal.\"};\r\n            }\r\n         }\r\n         else if (designation === \"tumour\") {\r\n            const invalidTypes = [\"normal\", \"cell line - derived from normal\"];\r\n            if (invalidTypes.includes(specimen_type)) {\r\n               result = {valid: false, message: \"Invalid specimen_type. Specimen_type cannot be set to normal type value (Normal or Cell line - derived from normal) when 'tumour_normal_designation' field is set to Tumour.\"};\r\n            }\r\n         }\r\n      }\r\n      return result;\r\n   })"]}}}},"created":{},"deleted":{}},"donor":{"updated":{"cause_of_death":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n        const {$row, $name, $field} = inputs;\r\n        let result = {valid: true, message: \"Ok\"};\r\n        const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\r\n        const vitalStatus = $row.vital_status.trim().toLowerCase();\r\n    \r\n        if (!currField && vitalStatus === \"deceased\"){\r\n            result = {valid: false, message: `${$name} must be provided when the donor's vital_status is deceased.`}\r\n        }\r\n        else if (currField && vitalStatus != \"deceased\"){\r\n            result = {valid: false, message: `${$name} cannot be provided if the donor's vital_status is not deceased.`}\r\n        }\r\n        return result;\r\n    })"],"right":["(function validate(inputs) {\r\n        const {$row, $name, $field} = inputs;\r\n        let result = {valid: true, message: \"Ok\"};\r\n        const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\r\n        \r\n        if ($row.vital_status != null) {\r\n           const vitalStatus = $row.vital_status.trim().toLowerCase();\r\n\r\n           if (!currField && vitalStatus === \"deceased\") {\r\n              result = {valid: false, message: `${$name} must be provided when the donor's vital_status is deceased.`}\r\n           }\r\n           else if (currField && vitalStatus != \"deceased\"){\r\n              result = {valid: false, message: `${$name} cannot be provided if the donor's vital_status is not deceased.`}\r\n           }\r\n        }\r\n        else if (($row.vital_status === null) && (currField)) {\r\n           result = {valid: false, message: `'${$name}' requires the 'vital_status' field.` }\r\n        }\r\n        return result;\r\n    })"]}}},"survival_time":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n        const {$row, $name, $field} = inputs;\r\n        let result = {valid: true, message: \"Ok\"};\r\n        const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\r\n        const vitalStatus = $row.vital_status.trim().toLowerCase();\r\n    \r\n        if (!currField && vitalStatus === \"deceased\"){\r\n            result = {valid: false, message: `${$name} must be provided when the donor's vital_status is deceased.`}\r\n        }\r\n        else if (currField && vitalStatus != \"deceased\"){\r\n            result = {valid: false, message: `${$name} cannot be provided if the donor's vital_status is not deceased.`}\r\n        }\r\n        return result;\r\n    })"],"right":["(function validate(inputs) {\r\n        const {$row, $name, $field} = inputs;\r\n        let result = {valid: true, message: \"Ok\"};\r\n        const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\r\n        \r\n        if ($row.vital_status != null) {\r\n           const vitalStatus = $row.vital_status.trim().toLowerCase();\r\n\r\n           if (!currField && vitalStatus === \"deceased\") {\r\n              result = {valid: false, message: `${$name} must be provided when the donor's vital_status is deceased.`}\r\n           }\r\n           else if (currField && vitalStatus != \"deceased\"){\r\n              result = {valid: false, message: `${$name} cannot be provided if the donor's vital_status is not deceased.`}\r\n           }\r\n        }\r\n        else if (($row.vital_status === null) && (currField)) {\r\n           result = {valid: false, message: `'${$name}' requires the 'vital_status' field.` }\r\n        }\r\n        return result;\r\n    })"]},"range":{"left":null,"right":{"exclusiveMin":0}}}},"primary_site":{"meta":{"notes":{"left":null,"right":"To include multiple values, separate values with a pipe delimiter '|' within your file."},"examples":{"left":null,"right":"Breast|Ovary"}},"restrictions":{"codeList":{"left":["Accessory sinuses","Adrenal gland","Anus and anal canal","Base of tongue","Bladder","Bones, joints and articular cartilage of limbs","Bones, joints and articular cartilage of other and unspecified sites","Brain","Breast","Bronchus and lung","Cervix uteri","Colon","Connective, subcutaneous and other soft tissues","Corpus uteri","Esophagus","Eye and adnexa","Floor of mouth","Gallbladder","Gum","Heart, mediastinum, and pleura","Hematopoietic and reticuloendothelial systems","Hypopharynx","Kidney","Larynx","Lip","Liver and intrahepatic bile ducts","Lymph nodes","Meninges","Nasal cavity and middle ear","Nasopharynx","Not Reported","Oropharynx","Other and ill-defined digestive organs","Other and ill-defined sites","Other and ill-defined sites in lip, oral cavity and pharynx","Other and ill-defined sites within respiratory system and intrathoracic organs","Other and unspecified female genital organs","Other and unspecified major salivary glands","Other and unspecified male genital organs","Other and unspecified parts of biliary tract","Other and unspecified parts of mouth","Other and unspecified parts of tongue","Other and unspecified urinary organs","Other endocrine glands and related structures","Ovary","Palate","Pancreas","Parotid gland","Penis","Peripheral nerves and autonomic nervous system","Placenta","Prostate gland","Pyriform sinus","Rectosigmoid junction","Rectum","Renal pelvis","Retroperitoneum and peritoneum","Skin","Small intestine","Spinal cord, cranial nerves, and other parts of central nervous system","Stomach","Testis","Thymus","Thyroid gland","Tonsil","Trachea","Ureter","Uterus, NOS","Vagina","Vulva","Unknown"],"right":["Accessory sinuses","Adrenal gland","Anus and anal canal","Base of tongue","Bladder","Bones, joints and articular cartilage of limbs","Bones, joints and articular cartilage of other and unspecified sites","Brain","Breast","Bronchus and lung","Cervix uteri","Colon","Connective, subcutaneous and other soft tissues","Corpus uteri","Esophagus","Eye and adnexa","Floor of mouth","Gallbladder","Gum","Heart, mediastinum, and pleura","Hematopoietic and reticuloendothelial systems","Hypopharynx","Kidney","Larynx","Lip","Liver and intrahepatic bile ducts","Lymph nodes","Meninges","Nasal cavity and middle ear","Nasopharynx","Oropharynx","Other and ill-defined digestive organs","Other and ill-defined sites","Other and ill-defined sites in lip, oral cavity and pharynx","Other and ill-defined sites within respiratory system and intrathoracic organs","Other and unspecified female genital organs","Other and unspecified major salivary glands","Other and unspecified male genital organs","Other and unspecified parts of biliary tract","Other and unspecified parts of mouth","Other and unspecified parts of tongue","Other and unspecified urinary organs","Other endocrine glands and related structures","Ovary","Palate","Pancreas","Parotid gland","Penis","Peripheral nerves and autonomic nervous system","Placenta","Prostate gland","Pyriform sinus","Rectosigmoid junction","Rectum","Renal pelvis","Retroperitoneum and peritoneum","Skin","Small intestine","Spinal cord, cranial nerves, and other parts of central nervous system","Stomach","Testis","Thymus","Thyroid gland","Tonsil","Trachea","Ureter","Uterus, NOS","Vagina","Vulva"],"data":{"added":[],"deleted":["Not Reported","Unknown"]}}}},"height":{"valueType":{"left":"integer","right":"number"},"restrictions":{}},"weight":{"valueType":{"left":"integer","right":"number"},"restrictions":{}},"bmi":{"valueType":{"left":"integer","right":"number"},"restrictions":{}},"age_at_menarche":{"description":{"left":"Indicate the donor's age of menarche, the first occurrence of menstruation.","right":"Indicate the donor's age at which the first menstruation event occurred. (Reference: NCIt C19666)"},"restrictions":{}},"number_of_pregnancies":{"description":{"left":"Indicate the number of pregnancies a donor has had.","right":"Indicate the total number of pregnancy events experienced by the donor. (Reference: NCIt C106551)"},"restrictions":{}},"number_of_children":{"description":{"left":"Indicate the number of children the donor has birthed.","right":"Indicate the number of children the donor has birthed. (Reference: caDSR CDE ID 2486644)"},"restrictions":{}}},"created":{"genetic_disorders":{"changeType":"created","description":"Indicate presence of any hereditary genetic disorders. (Reference: Genetic disorder names were standardized using Orphanet (https://www.orpha.net/) and NCI Thesaurus)","name":"genetic_disorders","valueType":"string","isArray":true,"restrictions":{"codeList":["Alpha-1-antitrypsin Deficiency","Ataxia Telangiectasia Syndrome","BAP1-related Tumor Predisposition Syndrome","Beckwith-Wiedemann Syndrome","Birt-Hogg-Dub Syndrome","Bloom Syndrome","Carney Complex","Cowden Syndrome","Familial Adenomatous Polyposis Syndrome (FAP)","Familial Atypical Multiple Mole Melanoma Syndrome (FAMMM)","Familial Gastrointestinal Stromal Tumor","Fanconi Anemia","Gardner Syndrome","Glycogen Storage Disease","Gorlin Syndrome","Hereditary Breast and Ovarian Cancer Syndrome (HBOC)","Hereditary Diffuse Gastric Cancer","Hereditary Leiomyomatosis and Renal Cell Cancer (HLRCC)","Hereditary Pancreatitis","Hereditary Papillary Renal Cell Carcinoma","Hereditary Retinoblastoma","Juvenile Polyposis Syndrome","Li-Fraumeni Syndrome","Lynch Syndrome","Serrated Polyposis Syndrome","Muir-Torre Syndrome","Multiple Endocrine Neoplasia Type 1 (MEN1)","Multiple Endocrine Neoplasia type 2 (MEN2)","MUTYH Polyposis Syndrome","Neurofibromatosis Type 1","Neurofibromatosis Type 2","Peutz-Jeghers Syndrome","PTEN hamartoma Tumor Syndrome","Rubinstein-Taybi Syndrome","Sjogren Syndrome","Tuberous Sclerosis Complex","Turcot Syndrome","Tyrosinemia Type 1","von Hippel-Lindau Syndrome","Werner Syndrome","Wiskott-Aldrich Syndrome","Xeroderma Pigmentosum"]},"meta":{"displayName":"Genetic Disorders","notes":"If the genetic disorder term you use is not included in the controlled terminology, please contact us at https://platform.icgc-argo.org/contact to request it be added. To include multiple values, separate values with a pipe delimiter '|' within your file.","examples":"Familial Adenomatous Polyposis Syndrome (FAP)|Lynch Syndrome"}},"hrt_type":{"changeType":"created","description":"Indicate the type of hormone replacement therapy (HRT) the donor has taken or is currently taking.","name":"hrt_type","restrictions":{"codeList":["Combination HRT","Estrogen-only HRT","Injectable","Never taken HRT","Other","Patch","Pill","Unknown"]},"valueType":"string","meta":{"displayName":"Hormone Replacement Therapy Type"}},"hrt_duration":{"changeType":"created","description":"If donor has taken hormone replacement therapy (HRT), indicate how long donor has been taking HRT, in months. (Reference: caDSR CDE ID 5365433)","name":"hrt_duration","valueType":"integer","restrictions":{"script":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      \r\n      /* checks for a string just consisting of whitespace */\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n     \r\n      const type = $name.trim().toLowerCase().split('_duration')[0];\r\n      const hormoneType = type + `_type`;\r\n   \r\n      if ($field != null && !(checkforEmpty($field))) {\r\n        if (!$row[hormoneType] || $row[hormoneType] === null || checkforEmpty($row[hormoneType])) {\r\n           result = { valid: false, message: `Indicate type of ${type} taken in the '${hormoneType}' field if '${$name}' field is submitted.`};\r\n        }\r\n        else if ($row[hormoneType].toLowerCase() === \"never taken hrt\" || $row[hormoneType].toLowerCase() === \"never used hormonal contraception\") {\r\n           const submittedValue = $row[hormoneType].toLowerCase()\r\n           result = {valid: false, message: `If '${$name}' is submitted, then '${hormoneType}' field cannot be '${submittedValue}'.`};\r\n       }\r\n\r\n      }\r\n      return result;\r\n  })"],"range":{"exclusiveMin":0}},"meta":{"displayName":"Hormone Replacement Therapy Duration","units":"months","dependsOn":"donor.hrt_type"}},"contraception_type":{"changeType":"created","description":"Indicate the type of hormonal contraception the donor has taken or is currently taking. (Reference: caDSR CDE ID 3264234)","name":"contraception_type","restrictions":{"codeList":["Combination pill","Contraceptive implant","Contraceptive patch","Injectable","Intrauterine device","Never used hormonal contraception","Other","Progestin-only pill","Unknown","Vaginal ring"]},"valueType":"string","meta":{"displayName":"Contraception Type"}},"contraception_duration":{"changeType":"created","description":"If donor has taken hormonal contraception, indicate duration of use, in months. (Reference: caDSR CDE ID 5206887)","name":"contraception_duration","valueType":"integer","restrictions":{"script":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      \r\n      /* checks for a string just consisting of whitespace */\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n     \r\n      const type = $name.trim().toLowerCase().split('_duration')[0];\r\n      const hormoneType = type + `_type`;\r\n   \r\n      if ($field != null && !(checkforEmpty($field))) {\r\n        if (!$row[hormoneType] || $row[hormoneType] === null || checkforEmpty($row[hormoneType])) {\r\n           result = { valid: false, message: `Indicate type of ${type} taken in the '${hormoneType}' field if '${$name}' field is submitted.`};\r\n        }\r\n        else if ($row[hormoneType].toLowerCase() === \"never taken hrt\" || $row[hormoneType].toLowerCase() === \"never used hormonal contraception\") {\r\n           const submittedValue = $row[hormoneType].toLowerCase()\r\n           result = {valid: false, message: `If '${$name}' is submitted, then '${hormoneType}' field cannot be '${submittedValue}'.`};\r\n       }\r\n\r\n      }\r\n      return result;\r\n  })"],"range":{"exclusiveMin":0}},"meta":{"displayName":"Hormonal Contraception Duration","units":"months","dependsOn":"donor.contraception_type"}}},"deleted":{}},"specimen":{"updated":{"pathological_stage_group":{"restrictions":{"codeList":{"left":["Stage 0","Stage 0a","Stage 0is","Stage I","Stage IA","Stage IA1","Stage IA2","Stage IA3","Stage IB","Stage IB1","Stage IB2","Stage IC","Stage IS","Stage IE","Stage II","Stage IIA","Stage IIA1","Stage IIA2","Stage IIE","Stage IIB","Stage IIC","Stage III","Stage IIIA","Stage IIIA1","Stage IIIA2","Stage IIIB","Stage IIIC","Stage IIIC1","Stage IIIC2","Stage IIID","Stage IV","Stage IVA","Stage IVA1","Stage IVA2","Stage IVB","Stage IVC","Occult carcinoma","Stage 1","Stage 1A","Stage 1B","Stage ISA","Stage ISB","Stage IEA","Stage IEB","Stage IIEA","Stage IIEB","Stage IIES","Stage IIESA","Stage IIESB","Stage IIS","Stage IISA","Stage IISB","Stage IIIE","Stage IIIEA","Stage IIIEB","Stage IIIES","Stage IIIESA","Stage IIIESB","Stage IIIS","Stage IIISA","Stage IIISB","Stage IAB","Stage A","Stage B","Stage C"],"right":["Occult Carcinoma","Stage 0","Stage 0a","Stage 0is","Stage 1","Stage 1A","Stage 1B","Stage A","Stage B","Stage C","Stage I","Stage IA","Stage IA1","Stage IA2","Stage IA3","Stage IAB","Stage IAE","Stage IAES","Stage IAS","Stage IB","Stage IB1","Stage IB2","Stage IBE","Stage IBES","Stage IBS","Stage IC","Stage IE","Stage IEA","Stage IEB","Stage IES","Stage II","Stage II bulky","Stage IIA","Stage IIA1","Stage IIA2","Stage IIAE","Stage IIAES","Stage IIAS","Stage IIB","Stage IIBE","Stage IIBES","Stage IIBS","Stage IIC","Stage IIE","Stage IIEA","Stage IIEB","Stage IIES","Stage III","Stage IIIA","Stage IIIA1","Stage IIIA2","Stage IIIAE","Stage IIIAES","Stage IIIAS","Stage IIIB","Stage IIIBE","Stage IIIBES","Stage IIIBS","Stage IIIC","Stage IIIC1","Stage IIIC2","Stage IIID","Stage IIIE","Stage IIIES","Stage IIIS","Stage IIS","Stage IS","Stage IV","Stage IVA","Stage IVA1","Stage IVA2","Stage IVAE","Stage IVAES","Stage IVAS","Stage IVB","Stage IVBE","Stage IVBES","Stage IVBS","Stage IVC","Stage IVE","Stage IVES","Stage IVS"],"data":{"added":["Occult Carcinoma","Stage IAE","Stage IAES","Stage IAS","Stage IBE","Stage IBES","Stage IBS","Stage IES","Stage II bulky","Stage IIAE","Stage IIAES","Stage IIAS","Stage IIBE","Stage IIBES","Stage IIBS","Stage IIIAE","Stage IIIAES","Stage IIIAS","Stage IIIBE","Stage IIIBES","Stage IIIBS","Stage IVAE","Stage IVAES","Stage IVAS","Stage IVBE","Stage IVBES","Stage IVBS","Stage IVE","Stage IVES","Stage IVS"],"deleted":["Occult carcinoma","Stage ISA","Stage ISB","Stage IIESA","Stage IIESB","Stage IISA","Stage IISB","Stage IIIEA","Stage IIIEB","Stage IIIESA","Stage IIIESB","Stage IIISA","Stage IIISB"]}},"script":{"left":["(function validate(inputs) {\r\n    const {$row, $name, $field} = inputs;\r\n    let result = { valid: true, message: 'Ok' };\r\n    const stagingName = $name\r\n      .trim()\r\n      .toLowerCase()\r\n      .split('_stage_group')[0];\r\n\r\n    const stagingSystem = stagingName + `_tumour_staging_system`;\r\n    \r\n    // checks for a string just consisting of whitespace\r\n    const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n \r\n    if ($row[stagingSystem] && (!$field || checkforEmpty($field))) {\r\n      result.valid = false;\r\n      const msg = `The ${stagingName}_stage_group must be submitted if the field ${stagingSystem} is submitted.`;\r\n      result.message = msg;\r\n    }\r\n    else if (!($row[stagingSystem]) && $field) {\r\n       result.valid = false;\r\n       const msg = `The field ${stagingSystem} must be submitted if ${stagingName}_stage_group is submitted.`;\r\n       result.message = msg;\r\n    }\r\n    else if ($row[stagingSystem] && $field) {\r\n      let codeList = [];\r\n      switch ($row[stagingSystem] && $row[stagingSystem].trim().toLowerCase()) {\r\n        case 'revised international staging system (riss)':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ii',\r\n            'stage iii'\r\n          ];\r\n          break;\r\n        case 'lugano staging system':\r\n          codeList = [\r\n             'stage i',\r\n             'stage ia',\r\n             'stage ib',\r\n             'stage ie',\r\n             'stage iea',\r\n             'stage ieb',\r\n             'stage ii',\r\n             'stage iia',\r\n             'stage iib',\r\n             'stage iie',\r\n             'stage iiea',\r\n             'stage iieb',\r\n             'stage iii',\r\n             'stage iiia',\r\n             'stage iiib',\r\n             'stage iv',\r\n             'stage iva',\r\n             'stage ivb'\r\n          ];\r\n          break;\r\n        case 'st jude staging system':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ii',\r\n            'stage iii',\r\n            'stage iv'\r\n          ];\r\n          break;\r\n        case 'ann arbor staging system':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ia',\r\n            'stage ib',\r\n            'stage ie',\r\n            'stage is',\r\n            'stage ii',\r\n            'stage iia',\r\n            'stage iib',\r\n            'stage iie',\r\n            'stage iis',\r\n            'stage iii',\r\n            'stage iiia',\r\n            'stage iiib',\r\n            'stage iiie',\r\n            'stage iiis',\r\n            'stage iv',\r\n            'stage iva',\r\n            'stage ivb',\r\n            'stage ive',\r\n            'stage ivs'\r\n          ];\r\n          break;\r\n        case 'rai staging system':\r\n          codeList = [\r\n             'stage 0',\r\n             'stage i',\r\n             'stage ii',\r\n             'stage iii',\r\n             'stage iv'\r\n          ];\r\n          break;\r\n        case 'durie-salmon staging system':\r\n          codeList = [\r\n            'stage 1',\r\n            'stage 1a',\r\n            'stage 1b',\r\n            'stage ii',\r\n            'stage iia',\r\n            'stage iib',\r\n            'stage iii',\r\n            'stage iiia',\r\n            'stage iiib'\r\n          ];\r\n          break;\r\n        case 'figo staging system':\r\n          codeList = [\r\n            'stage ia',\r\n            'stage ia1',\r\n            'stage ia2',\r\n            'stage ib',\r\n            'stage ib1',\r\n            'stage ib2',\r\n            'stage iia',\r\n            'stage iab',\r\n            'stage iiia',\r\n            'stage iiib',\r\n            'stage iva',\r\n            'stage ivb'\r\n          ];\r\n          break;\r\n        case 'binet staging system':\r\n          codeList = [\r\n             'stage a',\r\n             'stage b',\r\n             'stage c'\r\n         ];\r\n          break;\r\n        case 'ajcc 8th edition':\r\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'];\r\n          break;\r\n        case 'ajcc 7th edition':\r\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'\r\n];\r\n          break;\r\n        default:\r\n          codelist = [];\r\n      }\r\n\r\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\r\n        const msg = `'${$field}' is not a permissible value. When '${stagingSystem}' is set to '${\r\n          $row[stagingSystem]\r\n        }', '${stagingName}_stage_group' must be one of the following: \\n${codeList\r\n          .map(code => `- \"${code}\"`)\r\n          .join('\\n')}`;\r\n\r\n        result.valid = false;\r\n        result.message = msg;\r\n      }\r\n    }\r\n    \r\n    return result;\r\n  })"],"right":["(function validate(inputs) {\r\n    const {$row, $name, $field} = inputs;\r\n    let result = { valid: true, message: 'Ok' };\r\n    const stagingName = $name\r\n      .trim()\r\n      .toLowerCase()\r\n      .split('_stage_group')[0];\r\n\r\n    const stagingSystem = stagingName + `_tumour_staging_system`;\r\n    \r\n    /* checks for a string just consisting of whitespace */\r\n    const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n \r\n    if ($row[stagingSystem] && (!$field || checkforEmpty($field))) {\r\n      result.valid = false;\r\n      const msg = `The ${stagingName}_stage_group must be submitted if the field ${stagingSystem} is submitted.`;\r\n      result.message = msg;\r\n    }\r\n    else if (!($row[stagingSystem]) && $field) {\r\n       result.valid = false;\r\n       const msg = `The field ${stagingSystem} must be submitted if ${stagingName}_stage_group is submitted.`;\r\n       result.message = msg;\r\n    }\r\n    else if ($row[stagingSystem] && $field) {\r\n      let codeList = [];\r\n      switch ($row[stagingSystem] && $row[stagingSystem].trim().toLowerCase()) {\r\n        case 'revised international staging system (riss)':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ii',\r\n            'stage iii'\r\n          ];\r\n          break;\r\n        case 'lugano staging system':\r\n          codeList = [\r\n             'stage i',\r\n             'stage ia',\r\n             'stage ib',\r\n             'stage ie',\r\n             'stage iea',\r\n             'stage ieb',\r\n             'stage ii',\r\n             'stage ii bulky',\r\n             'stage iia',\r\n             'stage iib',\r\n             'stage iie',\r\n             'stage iiea',\r\n             'stage iieb',\r\n             'stage iii',\r\n             'stage iiia',\r\n             'stage iiib',\r\n             'stage iv',\r\n             'stage iva',\r\n             'stage ivb'\r\n          ];\r\n          break;\r\n        case 'st jude staging system':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ii',\r\n            'stage iii',\r\n            'stage iv'\r\n          ];\r\n          break;\r\n        case 'ann arbor staging system':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ia',\r\n            'stage ie',\r\n            'stage is',\r\n            'stage ies',\r\n            'stage iae',\r\n            'stage ias',\r\n            'stage iaes',\r\n            'stage ib',\r\n            'stage ibe',\r\n            'stage ibs',\r\n            'stage ibes',\r\n            'stage ii',\r\n            'stage iia',\r\n            'stage iie',\r\n            'stage iis',\r\n            'stage iies',\r\n            'stage iiae',\r\n            'stage iias',\r\n            'stage iiaes',\r\n            'stage iib',\r\n            'stage iibe',\r\n            'stage iibs',\r\n            'stage iibes',\r\n            'stage iii',\r\n            'stage iiia',\r\n            'stage iiie',\r\n            'stage iiis',\r\n            'stage iiies',\r\n            'stage iiiae',\r\n            'stage iiias',\r\n            'stage iiiaes',\r\n            'stage iiib',\r\n            'stage iiibe',\r\n            'stage iiibs',\r\n            'stage iiibes',\r\n            'stage iv',\r\n            'stage iva',\r\n            'stage ive',\r\n            'stage ivs',\r\n            'stage ives',\r\n            'stage ivae',\r\n            'stage ivas',\r\n            'stage ivaes',\r\n            'stage ivb',\r\n            'stage ivbe',\r\n            'stage ivbs',\r\n            'stage ivbes'\r\n          ];\r\n          break;\r\n        case 'rai staging system':\r\n          codeList = [\r\n             'stage 0',\r\n             'stage i',\r\n             'stage ii',\r\n             'stage iii',\r\n             'stage iv'\r\n          ];\r\n          break;\r\n        case 'durie-salmon staging system':\r\n          codeList = [\r\n            'stage 1',\r\n            'stage 1a',\r\n            'stage 1b',\r\n            'stage ii',\r\n            'stage iia',\r\n            'stage iib',\r\n            'stage iii',\r\n            'stage iiia',\r\n            'stage iiib'\r\n          ];\r\n          break;\r\n        case 'figo staging system':\r\n          codeList = [\r\n            'stage ia',\r\n            'stage ia1',\r\n            'stage ia2',\r\n            'stage ib',\r\n            'stage ib1',\r\n            'stage ib2',\r\n            'stage iia',\r\n            'stage iab',\r\n            'stage iiia',\r\n            'stage iiib',\r\n            'stage iva',\r\n            'stage ivb'\r\n          ];\r\n          break;\r\n        case 'binet staging system':\r\n          codeList = [\r\n             'stage a',\r\n             'stage b',\r\n             'stage c'\r\n         ];\r\n          break;\r\n        case 'ajcc 8th edition':\r\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'];\r\n          break;\r\n        case 'ajcc 7th edition':\r\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'\r\n];\r\n          break;\r\n        default:\r\n          codelist = [];\r\n      }\r\n\r\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\r\n        const msg = `'${$field}' is not a permissible value. When '${stagingSystem}' is set to '${\r\n          $row[stagingSystem]\r\n        }', '${stagingName}_stage_group' must be one of the following: \\n${codeList\r\n          .map(code => `- \"${code}\"`)\r\n          .join('\\n')}`;\r\n\r\n        result.valid = false;\r\n        result.message = msg;\r\n      }\r\n    }\r\n    \r\n    return result;\r\n  })"]}}},"specimen_acquisition_interval":{"restrictions":{"range":{"left":null,"right":{"min":0}}}},"specimen_storage":{"description":{"left":"Indicate the method of specimen storage for specimens that were not extracted freshly or immediately cultured.","right":"Indicate the method of specimen storage for specimen that were not extracted freshly or immediately cultured."}},"tumour_grading_system":{"meta":{"validationDependency":{"left":null,"right":true}}},"tumour_grade":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n    const {$row, $name, $field} = inputs;\r\n    let result = { valid: true, message: 'Ok' };\r\n    if ($row.tumour_grading_system && $field) {\r\n      let codeList = [];\r\n      const tieredGradingList = ['gx','g1','g2','g3'];\r\n      const gradingSystems = ['two-tier grading system', 'three-tier grading system', 'four-tier grading system', 'grading system for gists', 'grading system for gnets', 'isup grading system', 'who grading system for cns tumours', 'fnclcc grading system', 'gleason grade group system', 'scarff-bloom-richardson grading system', 'nuclear grading system for dcis'];\r\n      switch ($row.tumour_grading_system && $row.tumour_grading_system.trim().toLowerCase()) {\r\n        case 'two-tier grading system':\r\n          codeList = [\r\n            'low grade',\r\n            'high grade',\r\n          ];\r\n          break;\r\n        case 'three-tier grading system':\r\n          codeList = tieredGradingList;\r\n          break;\r\n        case 'four-tier grading system':\r\n          codeList = [\r\n            'gx',\r\n            'g1',\r\n            'g2',\r\n            'g3',\r\n            'g4',\r\n          ];\r\n          break;\r\n        case 'grading system for gists':\r\n          codeList = [\r\n            'low',\r\n            'high',\r\n          ];\r\n          break;\r\n        case 'grading system for gnets':\r\n          codeList = tieredGradingList;\r\n          break;\r\n        case 'isup grading system':\r\n          codeList = [\r\n            'gx',\r\n            'g1',\r\n            'g2',\r\n            'g3',\r\n            'g4',\r\n          ];\r\n          break;\r\n        case 'who grading system for cns tumours':\r\n          codeList = [\r\n            'grade i',\r\n            'grade ii',\r\n            'grade iii',\r\n            'grade iv',\r\n          ];\r\n          break;\r\n        case 'fnclcc grading system':\r\n          codeList = tieredGradingList;\r\n          break;\r\n        case 'gleason grade group system':\r\n          codeList = [\r\n            'grade group 1',\r\n            'grade group 2',\r\n            'grade group 3',\r\n            'grade group 4',\r\n            'grade group 5',\r\n          ];\r\n          break;\r\n        case 'scarff-bloom-richardson grading system':\r\n          codeList = tieredGradingList;\r\n          break;\r\n        case 'nuclear grading system for dcis':\r\n          codeList = tieredGradingList;\r\n          break;\r\n      }\r\n\r\n      if (!codeList.includes($field.trim().toLowerCase())) {\r\n        const msg = `'${$field}' is not a permissible value. When 'tumour_grading_system' is set to '${\r\n          $row.tumour_grading_system\r\n        }', 'tumour_grade' must be one of the following: \\n${codeList\r\n          .map(code => `- \"${code}\"`)\r\n          .join('\\n')}`;\r\n        result.valid = false;\r\n        result.message = msg;\r\n      }\r\n      else if (!gradingSystems.includes($row.tumour_grading_system.trim().toLowerCase())) {\r\n         result.valid = false;\r\n         const msg = \"'${$row.tumour_grading_system}' is not a permissible value for 'tumour_grading_system'. If the tumour grading system you use is missing, please contact the DCC.\";\r\n         result.message = msg;\r\n      }\r\n    }\r\n    return result;\r\n  })"],"right":["(function validate(inputs) {\r\n    const {$row, $name, $field} = inputs;\r\n    let result = { valid: true, message: 'Ok' };\r\n    if ($row.tumour_grading_system && $field) {\r\n      let codeList = [];\r\n      const tieredGradingList = ['gx','g1','g2','g3'];\r\n      const gradingSystems = ['two-tier grading system', 'three-tier grading system', 'four-tier grading system', 'grading system for gists', 'grading system for gnets', 'isup grading system', 'who grading system for cns tumours', 'fnclcc grading system', 'gleason grade group system', 'scarff-bloom-richardson grading system', 'nuclear grading system for dcis'];\r\n      switch ($row.tumour_grading_system && $row.tumour_grading_system.trim().toLowerCase()) {\r\n        case 'two-tier grading system':\r\n          codeList = [\r\n            'low grade',\r\n            'high grade',\r\n          ];\r\n          break;\r\n        case 'three-tier grading system':\r\n          codeList = tieredGradingList;\r\n          break;\r\n        case 'four-tier grading system':\r\n          codeList = [\r\n            'gx',\r\n            'g1',\r\n            'g2',\r\n            'g3',\r\n            'g4',\r\n          ];\r\n          break;\r\n        case 'grading system for gists':\r\n          codeList = [\r\n            'low',\r\n            'high',\r\n          ];\r\n          break;\r\n        case 'grading system for gnets':\r\n          codeList = tieredGradingList;\r\n          break;\r\n        case 'isup grading system':\r\n          codeList = [\r\n            'gx',\r\n            'g1',\r\n            'g2',\r\n            'g3',\r\n            'g4',\r\n          ];\r\n          break;\r\n        case 'who grading system for cns tumours':\r\n          codeList = [\r\n            'grade i',\r\n            'grade ii',\r\n            'grade iii',\r\n            'grade iv',\r\n          ];\r\n          break;\r\n        case 'fnclcc grading system':\r\n          codeList = tieredGradingList;\r\n          break;\r\n        case 'gleason grade group system':\r\n          codeList = [\r\n            'grade group 1',\r\n            'grade group 2',\r\n            'grade group 3',\r\n            'grade group 4',\r\n            'grade group 5',\r\n          ];\r\n          break;\r\n        case 'scarff-bloom-richardson grading system':\r\n          codeList = tieredGradingList;\r\n          break;\r\n        case 'nuclear grading system for dcis':\r\n          codeList = tieredGradingList;\r\n          break;\r\n      }\r\n\r\n      if (!codeList.includes($field.trim().toLowerCase())) {\r\n        const msg = `'${$field}' is not a permissible value. When 'tumour_grading_system' is set to '${\r\n          $row.tumour_grading_system\r\n        }', 'tumour_grade' must be one of the following: \\n${codeList\r\n          .map(code => `- \"${code}\"`)\r\n          .join('\\n')}`;\r\n        result.valid = false;\r\n        result.message = msg;\r\n      }\r\n      else if (!gradingSystems.includes($row.tumour_grading_system.trim().toLowerCase())) {\r\n         result.valid = false;\r\n         const msg = `'${$row.tumour_grading_system}' is not a permissible value for 'tumour_grading_system'. If the tumour grading system you use is missing, please contact the DCC.`;\r\n         result.message = msg;\r\n      }\r\n    }\r\n    return result;\r\n  })"]}}},"percent_tumour_cells":{"description":{"left":"Indicate a value, in decimals, that represents the percentage of infiltration by tumour cells in a specimen.","right":"Indicate a value, in decimals, that represents the percent of tumour cells compared to the number of total cells in a specimen. (Reference: NCIt: C159484)"},"restrictions":{}},"percent_proliferating_cells":{"restrictions":{}},"percent_inflammatory_tissue":{"description":{"left":"Indicate a value, in decimals, that represents local response to cellular injury, marked by capillary dilatation, edema and leukocyte infiltration; clinically, inflammation is manifest by redness, heat, pain, swelling and loss of function, with the need to heal damaged tissue.","right":"Indicate a value, in decimals, that represents the percent of a specimen that is positive for inflammatory markers, including the presence of capillary dilatation, edema and increased leukocytes. (Reference NCIt C159479)"},"restrictions":{}},"percent_stromal_cells":{"description":{"left":"Indicate a value, in decimals, that represents the percentage of reactive cells that are present in a malignant tumour specimen but are not malignant such as fibroblasts, vascular structures, etc.","right":"Indicate a value, in decimals, that represents the percentage of reactive cells that are present in a tumour specimen but are not malignant such as fibroblasts, vascular structures, etc. (Reference caDSR CDE ID 2841241)"},"restrictions":{}},"percent_necrosis":{"description":{"left":"Indicate a value, in decimals, that represents the percentage of cell death in a malignant tumour specimen.","right":"Indicate a value, in decimals, that represents the percent of cells undergoing necrosis compared to the number of total cells present in a tumour specimen. (Reference NCIt C159481)"},"restrictions":{}}},"created":{},"deleted":{}},"primary_diagnosis":{"updated":{"age_at_diagnosis":{"restrictions":{"range":{"left":null,"right":{"exclusiveMin":0,"max":90}}}},"number_lymph_nodes_positive":{"meta":{"dependsOn":{"left":null,"right":"primary_diagnosis.lymph_nodes_examined_status"},"notes":{"left":null,"right":"This field is only required if 'lymph_nodes_examined_status' is 'Yes'."}},"restrictions":{"required":{"left":true,"right":null},"script":{"left":null,"right":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n\r\n      /* checks for a string just consisting of whitespacei */\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n      \r\n      const numberLymphNodesExamined = $row.number_lymph_nodes_examined;\r\n      const numberLymphNodesPositive = $row.number_lymph_nodes_positive;\r\n      \r\n      if ($row.lymph_nodes_examined_status != null) {\r\n         const lymphNodesExaminedStatus = $row.lymph_nodes_examined_status.trim().toLowerCase();\r\n         /* if lymph nodes were examined and number_lymph_nodes_examined is submitted, it must be a value greater than 0. Otherwise, this field should be 0 or left blank. */\r\n         if (($name === \"number_lymph_nodes_examined\") && (!(checkforEmpty($field)))) {\r\n            if (lymphNodesExaminedStatus === \"yes\") { \r\n               if (parseInt($field) <= 0) {\r\n                  result = {\r\n                    valid: false,\r\n                    message: `The '${$name}' field must be a value greater than 0 if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\r\n                  };\r\n               }\r\n            }\r\n            else if (parseInt($field) > 0) {\r\n               result = {\r\n                 valid: false,\r\n                 message: `The '${$name}' field must be submitted as 0 or left blank if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\r\n               };\r\n            }\r\n         }\r\n      \r\n         /* If lymph nodes were examined, number_lymph_nodes_positive must be submitted and it must be a value less than or equal to number_lymph_nodes_examined (if it is submitted). Otherwise, this field should not be submitted.*/\r\n         else if ($name === \"number_lymph_nodes_positive\") {\r\n            if (lymphNodesExaminedStatus === \"yes\") {\r\n               if (checkforEmpty($field) || $field == null) {\r\n                  result = {\r\n                     valid: false,\r\n                     message: `The '${$name}' field must be submitted if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\r\n                  };\r\n               }\r\n               else if (parseInt($field) < 0) {\r\n                  result = {\r\n                    valid: false,\r\n                    message: `The '${$name}' field must be a value greater than or equal to 0 if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\r\n                  };\r\n               }\r\n               else if ((!(checkforEmpty(numberLymphNodesExamined)) && ((parseInt($field) > parseInt(numberLymphNodesExamined))))) {\r\n                  result = {\r\n                    valid: false,\r\n                    message: `The '${$name}' field must be a value less than or equal to 'number_lymph_nodes_examined' if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\r\n                  };\r\n               }\r\n            }\r\n            else if ($field || $field != null) {\r\n               result = {\r\n                 valid: false,\r\n                 message: `The '${$name}' field should not be submitted if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\r\n               };\r\n            }\r\n        }\r\n     }\r\n     return result;\r\n})"]},"range":{"left":null,"right":{"min":0}}}},"number_lymph_nodes_examined":{"meta":{"dependsOn":{"left":null,"right":"primary_diagnosis.lymph_nodes_examined_status"}},"restrictions":{}},"clinical_stage_group":{"description":{"left":"Stage group of the tumour, as assigned by the reporting clinical_tumour_staging_system, that indicates the overall prognostic tumour stage (ie. Stage I, Stage II, Stage III etc.).","right":"Stage group of the tumour, as assigned by the reporting clinical_tumour_staging_system, that indicates the overall prognostic tumour stage."},"meta":{"examples":{"left":null,"right":"Stage I, Stage IIB"}},"restrictions":{"codeList":{"left":["Stage 0","Stage 0a","Stage 0is","Stage I","Stage IA","Stage IA1","Stage IA2","Stage IA3","Stage IB","Stage IB1","Stage IB2","Stage IC","Stage IS","Stage IE","Stage II","Stage IIA","Stage IIA1","Stage IIA2","Stage IIE","Stage IIB","Stage IIC","Stage III","Stage IIIA","Stage IIIA1","Stage IIIA2","Stage IIIB","Stage IIIC","Stage IIIC1","Stage IIIC2","Stage IIID","Stage IV","Stage IVA","Stage IVA1","Stage IVA2","Stage IVB","Stage IVC","Occult carcinoma","Stage 1","Stage 1A","Stage 1B","Stage ISA","Stage ISB","Stage IEA","Stage IEB","Stage IIEA","Stage IIEB","Stage IIES","Stage IIESA","Stage IIESB","Stage IIS","Stage IISA","Stage IISB","Stage IIIE","Stage IIIEA","Stage IIIEB","Stage IIIES","Stage IIIESA","Stage IIIESB","Stage IIIS","Stage IIISA","Stage IIISB","Stage IAB","Stage A","Stage B","Stage C"],"right":["Occult Carcinoma","Stage 0","Stage 0a","Stage 0is","Stage 1","Stage 1A","Stage 1B","Stage A","Stage B","Stage C","Stage I","Stage IA","Stage IA1","Stage IA2","Stage IA3","Stage IAB","Stage IAE","Stage IAES","Stage IAS","Stage IB","Stage IB1","Stage IB2","Stage IBE","Stage IBES","Stage IBS","Stage IC","Stage IE","Stage IEA","Stage IEB","Stage IES","Stage II","Stage II bulky","Stage IIA","Stage IIA1","Stage IIA2","Stage IIAE","Stage IIAES","Stage IIAS","Stage IIB","Stage IIBE","Stage IIBES","Stage IIBS","Stage IIC","Stage IIE","Stage IIEA","Stage IIEB","Stage IIES","Stage III","Stage IIIA","Stage IIIA1","Stage IIIA2","Stage IIIAE","Stage IIIAES","Stage IIIAS","Stage IIIB","Stage IIIBE","Stage IIIBES","Stage IIIBS","Stage IIIC","Stage IIIC1","Stage IIIC2","Stage IIID","Stage IIIE","Stage IIIES","Stage IIIS","Stage IIS","Stage IS","Stage IV","Stage IVA","Stage IVA1","Stage IVA2","Stage IVAE","Stage IVAES","Stage IVAS","Stage IVB","Stage IVBE","Stage IVBES","Stage IVBS","Stage IVC","Stage IVE","Stage IVES","Stage IVS"],"data":{"added":["Occult Carcinoma","Stage IAE","Stage IAES","Stage IAS","Stage IBE","Stage IBES","Stage IBS","Stage IES","Stage II bulky","Stage IIAE","Stage IIAES","Stage IIAS","Stage IIBE","Stage IIBES","Stage IIBS","Stage IIIAE","Stage IIIAES","Stage IIIAS","Stage IIIBE","Stage IIIBES","Stage IIIBS","Stage IVAE","Stage IVAES","Stage IVAS","Stage IVBE","Stage IVBES","Stage IVBS","Stage IVE","Stage IVES","Stage IVS"],"deleted":["Occult carcinoma","Stage ISA","Stage ISB","Stage IIESA","Stage IIESB","Stage IISA","Stage IISB","Stage IIIEA","Stage IIIEB","Stage IIIESA","Stage IIIESB","Stage IIISA","Stage IIISB"]}},"script":{"left":["(function validate(inputs) {\r\n    const {$row, $name, $field} = inputs;\r\n    let result = { valid: true, message: 'Ok' };\r\n    const stagingName = $name\r\n      .trim()\r\n      .toLowerCase()\r\n      .split('_stage_group')[0];\r\n\r\n    const stagingSystem = stagingName + `_tumour_staging_system`;\r\n    \r\n    // checks for a string just consisting of whitespace\r\n    const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n \r\n    if ($row[stagingSystem] && (!$field || checkforEmpty($field))) {\r\n      result.valid = false;\r\n      const msg = `The ${stagingName}_stage_group must be submitted if the field ${stagingSystem} is submitted.`;\r\n      result.message = msg;\r\n    }\r\n    else if (!($row[stagingSystem]) && $field) {\r\n       result.valid = false;\r\n       const msg = `The field ${stagingSystem} must be submitted if ${stagingName}_stage_group is submitted.`;\r\n       result.message = msg;\r\n    }\r\n    else if ($row[stagingSystem] && $field) {\r\n      let codeList = [];\r\n      switch ($row[stagingSystem] && $row[stagingSystem].trim().toLowerCase()) {\r\n        case 'revised international staging system (riss)':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ii',\r\n            'stage iii'\r\n          ];\r\n          break;\r\n        case 'lugano staging system':\r\n          codeList = [\r\n             'stage i',\r\n             'stage ia',\r\n             'stage ib',\r\n             'stage ie',\r\n             'stage iea',\r\n             'stage ieb',\r\n             'stage ii',\r\n             'stage iia',\r\n             'stage iib',\r\n             'stage iie',\r\n             'stage iiea',\r\n             'stage iieb',\r\n             'stage iii',\r\n             'stage iiia',\r\n             'stage iiib',\r\n             'stage iv',\r\n             'stage iva',\r\n             'stage ivb'\r\n          ];\r\n          break;\r\n        case 'st jude staging system':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ii',\r\n            'stage iii',\r\n            'stage iv'\r\n          ];\r\n          break;\r\n        case 'ann arbor staging system':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ia',\r\n            'stage ib',\r\n            'stage ie',\r\n            'stage is',\r\n            'stage ii',\r\n            'stage iia',\r\n            'stage iib',\r\n            'stage iie',\r\n            'stage iis',\r\n            'stage iii',\r\n            'stage iiia',\r\n            'stage iiib',\r\n            'stage iiie',\r\n            'stage iiis',\r\n            'stage iv',\r\n            'stage iva',\r\n            'stage ivb',\r\n            'stage ive',\r\n            'stage ivs'\r\n          ];\r\n          break;\r\n        case 'rai staging system':\r\n          codeList = [\r\n             'stage 0',\r\n             'stage i',\r\n             'stage ii',\r\n             'stage iii',\r\n             'stage iv'\r\n          ];\r\n          break;\r\n        case 'durie-salmon staging system':\r\n          codeList = [\r\n            'stage 1',\r\n            'stage 1a',\r\n            'stage 1b',\r\n            'stage ii',\r\n            'stage iia',\r\n            'stage iib',\r\n            'stage iii',\r\n            'stage iiia',\r\n            'stage iiib'\r\n          ];\r\n          break;\r\n        case 'figo staging system':\r\n          codeList = [\r\n            'stage ia',\r\n            'stage ia1',\r\n            'stage ia2',\r\n            'stage ib',\r\n            'stage ib1',\r\n            'stage ib2',\r\n            'stage iia',\r\n            'stage iab',\r\n            'stage iiia',\r\n            'stage iiib',\r\n            'stage iva',\r\n            'stage ivb'\r\n          ];\r\n          break;\r\n        case 'binet staging system':\r\n          codeList = [\r\n             'stage a',\r\n             'stage b',\r\n             'stage c'\r\n         ];\r\n          break;\r\n        case 'ajcc 8th edition':\r\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'];\r\n          break;\r\n        case 'ajcc 7th edition':\r\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'\r\n];\r\n          break;\r\n        default:\r\n          codelist = [];\r\n      }\r\n\r\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\r\n        const msg = `'${$field}' is not a permissible value. When '${stagingSystem}' is set to '${\r\n          $row[stagingSystem]\r\n        }', '${stagingName}_stage_group' must be one of the following: \\n${codeList\r\n          .map(code => `- \"${code}\"`)\r\n          .join('\\n')}`;\r\n\r\n        result.valid = false;\r\n        result.message = msg;\r\n      }\r\n    }\r\n    \r\n    return result;\r\n  })"],"right":["(function validate(inputs) {\r\n    const {$row, $name, $field} = inputs;\r\n    let result = { valid: true, message: 'Ok' };\r\n    const stagingName = $name\r\n      .trim()\r\n      .toLowerCase()\r\n      .split('_stage_group')[0];\r\n\r\n    const stagingSystem = stagingName + `_tumour_staging_system`;\r\n    \r\n    /* checks for a string just consisting of whitespace */\r\n    const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n \r\n    if ($row[stagingSystem] && (!$field || checkforEmpty($field))) {\r\n      result.valid = false;\r\n      const msg = `The ${stagingName}_stage_group must be submitted if the field ${stagingSystem} is submitted.`;\r\n      result.message = msg;\r\n    }\r\n    else if (!($row[stagingSystem]) && $field) {\r\n       result.valid = false;\r\n       const msg = `The field ${stagingSystem} must be submitted if ${stagingName}_stage_group is submitted.`;\r\n       result.message = msg;\r\n    }\r\n    else if ($row[stagingSystem] && $field) {\r\n      let codeList = [];\r\n      switch ($row[stagingSystem] && $row[stagingSystem].trim().toLowerCase()) {\r\n        case 'revised international staging system (riss)':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ii',\r\n            'stage iii'\r\n          ];\r\n          break;\r\n        case 'lugano staging system':\r\n          codeList = [\r\n             'stage i',\r\n             'stage ia',\r\n             'stage ib',\r\n             'stage ie',\r\n             'stage iea',\r\n             'stage ieb',\r\n             'stage ii',\r\n             'stage ii bulky',\r\n             'stage iia',\r\n             'stage iib',\r\n             'stage iie',\r\n             'stage iiea',\r\n             'stage iieb',\r\n             'stage iii',\r\n             'stage iiia',\r\n             'stage iiib',\r\n             'stage iv',\r\n             'stage iva',\r\n             'stage ivb'\r\n          ];\r\n          break;\r\n        case 'st jude staging system':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ii',\r\n            'stage iii',\r\n            'stage iv'\r\n          ];\r\n          break;\r\n        case 'ann arbor staging system':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ia',\r\n            'stage ie',\r\n            'stage is',\r\n            'stage ies',\r\n            'stage iae',\r\n            'stage ias',\r\n            'stage iaes',\r\n            'stage ib',\r\n            'stage ibe',\r\n            'stage ibs',\r\n            'stage ibes',\r\n            'stage ii',\r\n            'stage iia',\r\n            'stage iie',\r\n            'stage iis',\r\n            'stage iies',\r\n            'stage iiae',\r\n            'stage iias',\r\n            'stage iiaes',\r\n            'stage iib',\r\n            'stage iibe',\r\n            'stage iibs',\r\n            'stage iibes',\r\n            'stage iii',\r\n            'stage iiia',\r\n            'stage iiie',\r\n            'stage iiis',\r\n            'stage iiies',\r\n            'stage iiiae',\r\n            'stage iiias',\r\n            'stage iiiaes',\r\n            'stage iiib',\r\n            'stage iiibe',\r\n            'stage iiibs',\r\n            'stage iiibes',\r\n            'stage iv',\r\n            'stage iva',\r\n            'stage ive',\r\n            'stage ivs',\r\n            'stage ives',\r\n            'stage ivae',\r\n            'stage ivas',\r\n            'stage ivaes',\r\n            'stage ivb',\r\n            'stage ivbe',\r\n            'stage ivbs',\r\n            'stage ivbes'\r\n          ];\r\n          break;\r\n        case 'rai staging system':\r\n          codeList = [\r\n             'stage 0',\r\n             'stage i',\r\n             'stage ii',\r\n             'stage iii',\r\n             'stage iv'\r\n          ];\r\n          break;\r\n        case 'durie-salmon staging system':\r\n          codeList = [\r\n            'stage 1',\r\n            'stage 1a',\r\n            'stage 1b',\r\n            'stage ii',\r\n            'stage iia',\r\n            'stage iib',\r\n            'stage iii',\r\n            'stage iiia',\r\n            'stage iiib'\r\n          ];\r\n          break;\r\n        case 'figo staging system':\r\n          codeList = [\r\n            'stage ia',\r\n            'stage ia1',\r\n            'stage ia2',\r\n            'stage ib',\r\n            'stage ib1',\r\n            'stage ib2',\r\n            'stage iia',\r\n            'stage iab',\r\n            'stage iiia',\r\n            'stage iiib',\r\n            'stage iva',\r\n            'stage ivb'\r\n          ];\r\n          break;\r\n        case 'binet staging system':\r\n          codeList = [\r\n             'stage a',\r\n             'stage b',\r\n             'stage c'\r\n         ];\r\n          break;\r\n        case 'ajcc 8th edition':\r\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'];\r\n          break;\r\n        case 'ajcc 7th edition':\r\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'\r\n];\r\n          break;\r\n        default:\r\n          codelist = [];\r\n      }\r\n\r\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\r\n        const msg = `'${$field}' is not a permissible value. When '${stagingSystem}' is set to '${\r\n          $row[stagingSystem]\r\n        }', '${stagingName}_stage_group' must be one of the following: \\n${codeList\r\n          .map(code => `- \"${code}\"`)\r\n          .join('\\n')}`;\r\n\r\n        result.valid = false;\r\n        result.message = msg;\r\n      }\r\n    }\r\n    \r\n    return result;\r\n  })"]}}}},"created":{"lymph_nodes_examined_status":{"changeType":"created","name":"lymph_nodes_examined_status","description":"Indicate if lymph nodes were examined for metastases.","valueType":"string","restrictions":{"required":true,"codeList":["Cannot be determined","No","No lymph nodes found in resected specimen","Not applicable","Yes"]},"meta":{"core":true,"displayName":"Lymph Nodes Examined Status"}}},"deleted":{}},"treatment":{"updated":{"is_primary_treatment":{"meta":{"dependsOn":{"left":null,"right":"treatment.treatment_type"}},"restrictions":{"required":{"left":true,"right":null},"script":{"left":null,"right":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\r\n \r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n      if ($row.treatment_type != null) {\r\n         const treatmentType = $row.treatment_type;\r\n         if (!(treatmentType.includes(\"No treatment\"))) {\r\n            if (coreFields.includes($name)) {\r\n               if (!$field || checkforEmpty($field)) {\r\n                  result = {\r\n                     valid: false,\r\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\r\n                  };\r\n               }\r\n            }\r\n         }\r\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\r\n            result = {\r\n               valid: false,\r\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\r\n            };\r\n         }\r\n      }\r\n      return result;\r\n  })"]}}},"line_of_treatment":{"meta":{"dependsOn":{"left":null,"right":"treatment.is_primary_treatment"}},"restrictions":{}},"treatment_start_interval":{"meta":{"dependsOn":{"left":null,"right":"treatment.treatment_type"}},"restrictions":{"required":{"left":true,"right":null},"script":{"left":null,"right":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\r\n \r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n      if ($row.treatment_type != null) {\r\n         const treatmentType = $row.treatment_type;\r\n         if (!(treatmentType.includes(\"No treatment\"))) {\r\n            if (coreFields.includes($name)) {\r\n               if (!$field || checkforEmpty($field)) {\r\n                  result = {\r\n                     valid: false,\r\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\r\n                  };\r\n               }\r\n            }\r\n         }\r\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\r\n            result = {\r\n               valid: false,\r\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\r\n            };\r\n         }\r\n      }\r\n      return result;\r\n  })"]},"range":{"left":null,"right":{"exclusiveMin":0}}}},"treatment_duration":{"meta":{"dependsOn":{"left":null,"right":"treatment.treatment_type"}},"restrictions":{"required":{"left":true,"right":null},"script":{"left":null,"right":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\r\n \r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n      if ($row.treatment_type != null) {\r\n         const treatmentType = $row.treatment_type;\r\n         if (!(treatmentType.includes(\"No treatment\"))) {\r\n            if (coreFields.includes($name)) {\r\n               if (!$field || checkforEmpty($field)) {\r\n                  result = {\r\n                     valid: false,\r\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\r\n                  };\r\n               }\r\n            }\r\n         }\r\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\r\n            result = {\r\n               valid: false,\r\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\r\n            };\r\n         }\r\n      }\r\n      return result;\r\n  })"]},"range":{"left":null,"right":{"exclusiveMin":0}}}},"days_per_cycle":{"meta":{"dependsOn":{"left":null,"right":"treatment.treatment_type"}},"restrictions":{}},"number_of_cycles":{"meta":{"dependsOn":{"left":null,"right":"treatment.treatment_type"}},"restrictions":{}},"treatment_intent":{"meta":{"dependsOn":{"left":null,"right":"treatment.treatment_type"}},"restrictions":{"required":{"left":true,"right":null},"script":{"left":null,"right":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\r\n \r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n      if ($row.treatment_type != null) {\r\n         const treatmentType = $row.treatment_type;\r\n         if (!(treatmentType.includes(\"No treatment\"))) {\r\n            if (coreFields.includes($name)) {\r\n               if (!$field || checkforEmpty($field)) {\r\n                  result = {\r\n                     valid: false,\r\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\r\n                  };\r\n               }\r\n            }\r\n         }\r\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\r\n            result = {\r\n               valid: false,\r\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\r\n            };\r\n         }\r\n      }\r\n      return result;\r\n  })"]}}},"treatment_setting":{"meta":{"dependsOn":{"left":null,"right":"treatment.treatment_type"}},"restrictions":{"required":{"left":true,"right":null},"script":{"left":null,"right":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\r\n \r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n      if ($row.treatment_type != null) {\r\n         const treatmentType = $row.treatment_type;\r\n         if (!(treatmentType.includes(\"No treatment\"))) {\r\n            if (coreFields.includes($name)) {\r\n               if (!$field || checkforEmpty($field)) {\r\n                  result = {\r\n                     valid: false,\r\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\r\n                  };\r\n               }\r\n            }\r\n         }\r\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\r\n            result = {\r\n               valid: false,\r\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\r\n            };\r\n         }\r\n      }\r\n      return result;\r\n  })"]}}},"response_to_treatment":{"meta":{"dependsOn":{"left":null,"right":"treatment.treatment_type"}},"restrictions":{"required":{"left":true,"right":null},"script":{"left":null,"right":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\r\n \r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n      if ($row.treatment_type != null) {\r\n         const treatmentType = $row.treatment_type;\r\n         if (!(treatmentType.includes(\"No treatment\"))) {\r\n            if (coreFields.includes($name)) {\r\n               if (!$field || checkforEmpty($field)) {\r\n                  result = {\r\n                     valid: false,\r\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\r\n                  };\r\n               }\r\n            }\r\n         }\r\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\r\n            result = {\r\n               valid: false,\r\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\r\n            };\r\n         }\r\n      }\r\n      return result;\r\n  })"]}}},"outcome_of_treatment":{"meta":{"dependsOn":{"left":null,"right":"treatment.treatment_type"}},"restrictions":{"script":{"left":null,"right":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\r\n \r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n      if ($row.treatment_type != null) {\r\n         const treatmentType = $row.treatment_type;\r\n         if (!(treatmentType.includes(\"No treatment\"))) {\r\n            if (coreFields.includes($name)) {\r\n               if (!$field || checkforEmpty($field)) {\r\n                  result = {\r\n                     valid: false,\r\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\r\n                  };\r\n               }\r\n            }\r\n         }\r\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\r\n            result = {\r\n               valid: false,\r\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\r\n            };\r\n         }\r\n      }\r\n      return result;\r\n  })"]}}},"toxicity_type":{"description":{"left":"If the treatment was terminated early due to acute toxicity, indicate whether it was due to hemotological toxicity or non-hemotological toxicity.","right":"If the treatment was terminated early due to acute toxicity, indicate whether it was due to hematological toxicity or non-hematological toxicity."},"meta":{"dependsOn":{"left":null,"right":"treatment.outcome_of_treatment"}},"restrictions":{"codeList":{"left":["Hemotological","Non-hemotological"],"right":["Hematological","Non-hematological"],"data":{"added":["Hematological","Non-hematological"],"deleted":["Hemotological","Non-hemotological"]}},"script":{"left":null,"right":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      \r\n      /* checks for a string just consisting of whitespace */\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n      \r\n      if ($field != null && !(checkforEmpty($field))) {\r\n         if (($row.outcome_of_treatment != null && !(checkforEmpty($row.outcome_of_treatment)))) { \r\n            const outcomeOfTreatment = $row.outcome_of_treatment.trim().toLowerCase();\r\n     \r\n            /* toxicityType should only be submitted if treatment was terminated early due to acute toxicity ('outcome_of_treatment' is 'Treatment stopped due to acute toxicity'). */\r\n            if (outcomeOfTreatment != \"treatment stopped due to acute toxicity\") {\r\n               result = { valid: false, message: `The 'outcome_of_treatment' field should be 'Treatment stopped due to acute toxicity' if the '${$name}' field is submitted.`};\r\n            }\r\n         }\r\n         else {\r\n            result = {valid: false, message: `If the 'toxicity_type' field is submitted, then the 'outcome_of_treatment' field must be submitted as well.`}\r\n         }\r\n      }\r\n      return result;\r\n  })"]}}},"adverse_events":{"meta":{"dependsOn":{"left":null,"right":"treatment.treatment_type"}},"restrictions":{"script":{"left":null,"right":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\r\n \r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n      if ($row.treatment_type != null) {\r\n         const treatmentType = $row.treatment_type;\r\n         if (!(treatmentType.includes(\"No treatment\"))) {\r\n            if (coreFields.includes($name)) {\r\n               if (!$field || checkforEmpty($field)) {\r\n                  result = {\r\n                     valid: false,\r\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\r\n                  };\r\n               }\r\n            }\r\n         }\r\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\r\n            result = {\r\n               valid: false,\r\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\r\n            };\r\n         }\r\n      }\r\n      return result;\r\n  })"]}}},"clinical_trial_number":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n      \r\n      //regex check for clinical trial number\r\n      const NCTCheck = (entry) => {return /(^([Nn][Cc][Tt])[0-9]{8})/.test(decodeURI(entry))};\r\n      const EudraCTCheck = (entry) => {return /(^[2][0-9]{3}-[0-9]{6}-[0-9]{2})/.test(decodeURI(entry))};\r\n\r\n      // list of valid clinical trial databases\r\n      const clinical_dbs = [\"nci clinical trials\", \"eu clinical trials register\"];\r\n      \r\n      if ($row.clinical_trials_database && $field) {\r\n          const trialNumber = $field.trim();\r\n          const clinicalTrialsDB = $row.clinical_trials_database.trim().toLowerCase();\r\n          if ((clinicalTrialsDB === \"nci clinical trials\") && (!NCTCheck(trialNumber))) {\r\n            result = {valid: false, message: 'The submitted NCI clinical trial number is in incorrect format.'};\r\n          }\r\n          else if ((clinicalTrialsDB === \"eu clinical trials register\") && (!EudraCTCheck(trialNumber))) {\r\n            result = {valid: false, message: \"The submitted EudraCT clinical trial number is in incorrect format.\"};\r\n          }\r\n          else if (!clinical_dbs.includes(clinicalTrialsDB)) {\r\n            result = {valid: false, message: \"The submitted clinical trials database '${$row.clinical_trials_database}' is not included in the list of clinical trial database.\"};\r\n          }\r\n      }\r\n      else if ((!$row.clinical_trials_database || checkforEmpty($row.clnical_trials_database)) && (!$field || checkforEmpty($field))) {\r\n          result = {valid: true, message: \"Ok\"};\r\n      }\r\n      else if ($row.clinical_trials_database && !$field) {\r\n          if (clinical_dbs.includes($row.clinical_trials_database.trim().toLowerCase())) {\r\n            result = {valid: false, message: \"'${$name}' must be provided if 'clinical_trial_database' is set to '${$row.clinical_trials_database}'.\"};\r\n          } \r\n      }\r\n      return result;\r\n    })"],"right":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n      \r\n      //regex check for clinical trial number\r\n      const NCTCheck = (entry) => {return /(^([Nn][Cc][Tt])[0-9]{8})/.test(decodeURI(entry))};\r\n      const EudraCTCheck = (entry) => {return /(^[2][0-9]{3}-[0-9]{6}-[0-9]{2})/.test(decodeURI(entry))};\r\n\r\n      // list of valid clinical trial databases\r\n      const clinical_dbs = [\"nci clinical trials\", \"eu clinical trials register\"];\r\n      \r\n      if ($row.clinical_trials_database && $field) {\r\n          const trialNumber = $field.trim();\r\n          const clinicalTrialsDB = $row.clinical_trials_database.trim().toLowerCase();\r\n          if ((clinicalTrialsDB === \"nci clinical trials\") && (!NCTCheck(trialNumber))) {\r\n            result = {valid: false, message: `The submitted NCI clinical trial number is in incorrect format.`};\r\n          }\r\n          else if ((clinicalTrialsDB === \"eu clinical trials register\") && (!EudraCTCheck(trialNumber))) {\r\n            result = {valid: false, message: `The submitted EudraCT clinical trial number is in incorrect format.`};\r\n          }\r\n          else if (!clinical_dbs.includes(clinicalTrialsDB)) {\r\n            result = {valid: false, message: `The submitted clinical trials database '${$row.clinical_trials_database}' is not included in the list of clinical trial database.`};\r\n          }\r\n      }\r\n      else if ((!$row.clinical_trials_database || checkforEmpty($row.clnical_trials_database)) && (!$field || checkforEmpty($field))) {\r\n          result = {valid: true, message: \"Ok\"};\r\n      }\r\n      else if ($row.clinical_trials_database && !$field) {\r\n          if (clinical_dbs.includes($row.clinical_trials_database.trim().toLowerCase())) {\r\n            result = {valid: false, message: `'${$name}' must be provided if 'clinical_trial_database' is set to '${$row.clinical_trials_database}'.`};\r\n          } \r\n      }\r\n      else if ((!$row.clinical_trials_database || checkforEmpty($row.clnical_trials_database)) && $field) {\r\n         result = { valid: false, message: `The 'clinical_trial_database' field must be submitted if '${$name}' is submitted.`};\r\n      }\r\n      return result;\r\n    })"]}}}},"created":{"hematological_toxicity":{"changeType":"created","name":"hematological_toxicity","description":"Indicate the hematological toxicities which caused early termination of the treatment. (Codelist reference: NCI-CTCAE (v5.0))","valueType":"string","isArray":true,"restrictions":{"codeList":["Anemia - Grade 3","Anemia - Grade 4","Anemia - Grade 5","Neutropenia - Grade 3","Neutropenia - Grade 4","Neutropenia - Grade 5","Thrombocytopenia - Grade 3","Thrombocytopenia - Grade 4","Thrombocytopenia - Grade 5"],"script":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      \r\n      /* checks for a string just consisting of whitespace */\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n      \r\n      if ($field != null && !(checkforEmpty($field))) {\r\n         if (($row.toxicity_type != null && !(checkforEmpty($row.toxicity_type)))) { \r\n            const toxicityType = $row.toxicity_type.trim().toLowerCase();\r\n     \r\n            /* if toxicity_type is non-hematological, then hematological_toxicity should not be submitted. If toxicity_type is hematological, then 'non-hematological_toxicity' should not be submitted */\r\n            if (toxicityType === 'non-hematological' && $name === 'hematological_toxicity') {\r\n               result = { valid: false, message: `The '${$name}' field should not be submitted if 'toxicity_type' is '${toxicityType}'.`};\r\n            }\r\n            else if (toxicityType === 'hematological' && $name === 'non-hematological_toxicity') {\r\n               result = { valid: false, message: `The '${$name}' field should not be submitted if 'toxicity_type' is '${toxicityType}'.`};\r\n            }\r\n         }\r\n         else {\r\n            result = {valid: false, message: `The 'toxicity_type' field should be submitted if '${$name}' field is submitted.`};\r\n         }\r\n      }\r\n      return result;\r\n  })"]},"meta":{"displayName":"Hemotological Toxicity","dependsOn":"treatment.toxicity_type","notes":"To include multiple values, separate values with a pipe delimiter '|' within your file."}},"non-hematological_toxicity":{"changeType":"created","name":"non-hematological_toxicity","description":"Indicate the non-hematological toxicities which caused early termination of the treatment. (Codelist reference: NCI-CTCAE (v5.0))","valueType":"string","isArray":true,"restrictions":{"codeList":["Cardiac disorders - Grade 1","Cardiac disorders - Grade 2","Cardiac disorders - Grade 3","Cardiac disorders - Grade 4","Cardiac disorders - Grade 5","Dehydration - Grade 1","Dehydration - Grade 2","Dehydration - Grade 3","Dehydration - Grade 4","Dehydration - Grade 5","Diarrhea - Grade 1","Diarrhea - Grade 2","Diarrhea - Grade 3","Diarrhea - Grade 4","Diarrhea - Grade 5","Fatigue - Grade 1","Fatigue - Grade 2","Fatigue - Grade 3","Nausea - Grade 1","Nausea - Grade 2","Nausea - Grade 3","Vomiting - Grade 1","Vomiting - Grade 2","Vomiting - Grade 3","Vomiting - Grade 4","Vomiting - Grade 5","Weight loss - Grade 1","Weight loss - Grade 2","Weight loss - Grade 3"],"script":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      \r\n      /* checks for a string just consisting of whitespace */\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n      \r\n      if ($field != null && !(checkforEmpty($field))) {\r\n         if (($row.toxicity_type != null && !(checkforEmpty($row.toxicity_type)))) { \r\n            const toxicityType = $row.toxicity_type.trim().toLowerCase();\r\n     \r\n            /* if toxicity_type is non-hematological, then hematological_toxicity should not be submitted. If toxicity_type is hematological, then 'non-hematological_toxicity' should not be submitted */\r\n            if (toxicityType === 'non-hematological' && $name === 'hematological_toxicity') {\r\n               result = { valid: false, message: `The '${$name}' field should not be submitted if 'toxicity_type' is '${toxicityType}'.`};\r\n            }\r\n            else if (toxicityType === 'hematological' && $name === 'non-hematological_toxicity') {\r\n               result = { valid: false, message: `The '${$name}' field should not be submitted if 'toxicity_type' is '${toxicityType}'.`};\r\n            }\r\n         }\r\n         else {\r\n            result = {valid: false, message: `The 'toxicity_type' field should be submitted if '${$name}' field is submitted.`};\r\n         }\r\n      }\r\n      return result;\r\n  })"]},"meta":{"displayName":"Non-hematological Toxicity","dependsOn":"treatment.toxicity_type","notes":"To include multiple values, separate values with a pipe delimiter '|' within your file."}}},"deleted":{"hemotological_toxicity":{"changeType":"deleted","name":"hemotological_toxicity","description":"Indicate the hemotological toxicities which caused early termination of the treatment. (Codelist reference: NCI-CTCAE (v5.0))","valueType":"string","isArray":true,"restrictions":{"codeList":["Anemia - Grade 3","Anemia - Grade 4","Anemia - Grade 5","Neutropenia - Grade 3","Neutropenia - Grade 4","Neutropenia - Grade 5","Thrombocytopenia - Grade 3","Thrombocytopenia - Grade 4","Thrombocytopenia - Grade 5"]},"meta":{"displayName":"Hemotological Toxicity","notes":"To include multiple values, separate values with a pipe delimiter '|' within your file."}}}},"chemotherapy":{"updated":{"drug_name":{"description":{"left":"Name of agent or drug administered to patient as part of the treatment regimen.","right":"Name of agent or drug administered to donor as part of the treatment regimen."}},"cumulative_drug_dosage":{"restrictions":{"range":{"left":null,"right":{"exclusiveMin":0}}}}},"created":{},"deleted":{}},"hormone_therapy":{"updated":{"drug_name":{"description":{"left":"Name of agent or drug administered to patient as part of the treatment regimen.","right":"Name of agent or drug administered to donor as part of the treatment regimen."}},"cumulative_drug_dosage":{"restrictions":{"range":{"left":null,"right":{"exclusiveMin":0}}}}},"created":{},"deleted":{}},"radiation":{"updated":{"radiation_therapy_fractions":{"restrictions":{"range":{"left":null,"right":{"exclusiveMin":0}}}},"radiation_therapy_dosage":{"restrictions":{"range":{"left":null,"right":{"exclusiveMin":0}}}}},"created":{},"deleted":{}},"follow_up":{"updated":{"interval_of_followup":{"restrictions":{"range":{"left":null,"right":{"exclusiveMin":0}}}},"weight_at_followup":{"valueType":{"left":"integer","right":"number"},"restrictions":{}},"relapse_type":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n        let result = {valid: true, message: \"Ok\"};\r\n        \r\n        /* required field, cannot be null */\r\n        const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\r\n    \r\n        const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \r\n        const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\r\n   \r\n        // checks for a string just consisting of whitespace\r\n        const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n\r\n        if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\r\n            result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\r\n        }\r\n        else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\r\n            result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\r\n        }\r\n        return  result;\r\n    })"],"right":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n        let result = {valid: true, message: \"Ok\"};\r\n        \r\n        /* required field, cannot be null */\r\n        if ($row.disease_status_at_followup != null) {\r\n           const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\r\n           const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \r\n           const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\r\n   \r\n           /* checks for a string just consisting of whitespace */\r\n           const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n           if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\r\n              result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\r\n           }\r\n           else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\r\n              result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\r\n           }\r\n        }\r\n        return  result;\r\n  })"]}}},"relapse_interval":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      \r\n      /* required field, cannot be null */\r\n      const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\r\n      const intervalOfFollowup = parseInt($row.interval_of_followup);\r\n\r\n      const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \r\n      const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\r\n  \r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n\r\n      if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\r\n          result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\r\n      }\r\n      else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\r\n          result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\r\n      }\r\n      else if (!(checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\r\n          relapseInterval = parseInt($field);\r\n          if (relapseInterval > intervalOfFollowup) {\r\n              result = {valid: false, message: `'${$name}' cannot be greater than the 'interval_of_followup'.` }\r\n          }\r\n      }\r\n      return  result;\r\n    })"],"right":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      \r\n      /* required field, cannot be null */\r\n      if ($row.disease_status_at_followup != null) {\r\n         const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\r\n         const intervalOfFollowup = parseInt($row.interval_of_followup);\r\n         const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \r\n         const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\r\n  \r\n         /* checks for a string just consisting of whitespace */\r\n         const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n         if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\r\n            result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\r\n         }\r\n         else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\r\n            result = {valid: false, message: `The '${$name}' field cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\r\n         }\r\n         else if (!(checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\r\n            relapseInterval = parseInt($field);\r\n            if (relapseInterval > intervalOfFollowup) {\r\n               result = {valid: false, message: `The '${$name}' field cannot be greater than the 'interval_of_followup'.` }\r\n            }\r\n         }\r\n      }\r\n      return  result;\r\n  })"]},"range":{"left":null,"right":{"exclusiveMin":0}}}},"method_of_progression_status":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n        let result = {valid: true, message: \"Ok\"};\r\n        \r\n        /* required field, cannot be null */\r\n        const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\r\n    \r\n        const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \r\n        const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\r\n   \r\n        // checks for a string just consisting of whitespace\r\n        const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n\r\n        if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\r\n            result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\r\n        }\r\n        else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\r\n            result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\r\n        }\r\n        return  result;\r\n    })"],"right":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n        let result = {valid: true, message: \"Ok\"};\r\n        \r\n        /* required field, cannot be null */\r\n        if ($row.disease_status_at_followup != null) {\r\n           const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\r\n           const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \r\n           const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\r\n   \r\n           /* checks for a string just consisting of whitespace */\r\n           const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n           if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\r\n              result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\r\n           }\r\n           else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\r\n              result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\r\n           }\r\n        }\r\n        return  result;\r\n  })"]}}},"recurrence_tumour_staging_system":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n    const {$row, $name, $field} = inputs;\r\n    let result = { valid: true, message: 'Ok' };\r\n    const arrayFormatter = arr => `\\n${arr.map(entry => `- \"${entry}\"`).join('\\n')}`;\r\n    const listFormatter = arr => `${arr.map(entry => `\"${entry}\"`).join(', ')}`;\r\n\r\n   \r\n   /* Contingent on the naming system for tumour staging systems to remain consistent */\r\n    const stagingName = $name\r\n      .trim()\r\n      .toLowerCase()\r\n      .split('_tumour_staging_system')[0];\r\n    const requiredFields = [\r\n      `${stagingName}_m_category`,\r\n      `${stagingName}_n_category`,\r\n      `${stagingName}_t_category`,\r\n    ];\r\n    const convertedRow = Object.fromEntries(\r\n      Object.entries($row).map(([fieldName, fieldVal]) => [fieldName.toLowerCase(), fieldVal]),\r\n    );\r\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\r\n    const checkforEmpty = entry => {\r\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\r\n    };\r\n\r\n    /* search for fields with falsy values*/\r\n    const emptyFields = requiredFields.filter(\r\n      field => !convertedRow[field] || checkforEmpty(convertedRow[field]),\r\n    );\r\n\r\n    /* The staging system should be set to an AJCC option if the TNM fields are submitted */\r\n    if (!($field) && emptyFields.length != requiredFields.length) {\r\n       const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\r\n       result = {\r\n         valid: false,\r\n         message:`The ${stagingName}_tumour_staging_system field must be set to an AJCC option when the following fields are submitted: ${listFormatter(\r\n            errorFields,\r\n          )}`,\r\n       };\r\n    }\r\n    /* This is not a required field, so first ensure that it exists */\r\n    else if ($field) {\r\n      /* The fields should be provided IF and ONLY IF the AJCC regex passes */\r\n      if (/^(AJCC)\\b/i.test($field) && emptyFields.length) {\r\n        result = {\r\n          valid: false,\r\n          message: `The following fields are required when ${$name} is set to an AJCC option: ${arrayFormatter(\r\n            emptyFields,\r\n          )}`,\r\n        };\r\n      } else if (!/^(AJCC)\\b/i.test($field) && emptyFields.length != requiredFields.length) {\r\n        const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\r\n        result = {\r\n          valid: false,\r\n          message: `The following fields cannot be provided when ${$name} is not set to an AJCC option: ${arrayFormatter(\r\n            errorFields,\r\n          )}`,\r\n        };\r\n      }\r\n    }\r\n    return result;\r\n  })","(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n        let result = {valid: true, message: \"Ok\"};\r\n        \r\n        /* required field, cannot be null */\r\n        const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\r\n    \r\n        const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \r\n        const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\r\n   \r\n        // checks for a string just consisting of whitespace\r\n        const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n\r\n        if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\r\n            result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\r\n        }\r\n        else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\r\n            result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\r\n        }\r\n        return  result;\r\n    })"],"right":["(function validate(inputs) {\r\n    const {$row, $name, $field} = inputs;\r\n    let result = { valid: true, message: 'Ok' };\r\n    const arrayFormatter = arr => `\\n${arr.map(entry => `- \"${entry}\"`).join('\\n')}`;\r\n    const listFormatter = arr => `${arr.map(entry => `\"${entry}\"`).join(', ')}`;\r\n\r\n   \r\n   /* Contingent on the naming system for tumour staging systems to remain consistent */\r\n    const stagingName = $name\r\n      .trim()\r\n      .toLowerCase()\r\n      .split('_tumour_staging_system')[0];\r\n    const requiredFields = [\r\n      `${stagingName}_m_category`,\r\n      `${stagingName}_n_category`,\r\n      `${stagingName}_t_category`,\r\n    ];\r\n    const convertedRow = Object.fromEntries(\r\n      Object.entries($row).map(([fieldName, fieldVal]) => [fieldName.toLowerCase(), fieldVal]),\r\n    );\r\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\r\n    const checkforEmpty = entry => {\r\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\r\n    };\r\n\r\n    /* search for fields with falsy values*/\r\n    const emptyFields = requiredFields.filter(\r\n      field => !convertedRow[field] || checkforEmpty(convertedRow[field]),\r\n    );\r\n\r\n    /* The staging system should be set to an AJCC option if the TNM fields are submitted */\r\n    if (!($field) && emptyFields.length != requiredFields.length) {\r\n       const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\r\n       result = {\r\n         valid: false,\r\n         message:`The ${stagingName}_tumour_staging_system field must be set to an AJCC option when the following fields are submitted: ${listFormatter(\r\n            errorFields,\r\n          )}`,\r\n       };\r\n    }\r\n    /* This is not a required field, so first ensure that it exists */\r\n    else if ($field) {\r\n      /* The fields should be provided IF and ONLY IF the AJCC regex passes */\r\n      if (/^(AJCC)\\b/i.test($field) && emptyFields.length) {\r\n        result = {\r\n          valid: false,\r\n          message: `The following fields are required when ${$name} is set to an AJCC option: ${arrayFormatter(\r\n            emptyFields,\r\n          )}`,\r\n        };\r\n      } else if (!/^(AJCC)\\b/i.test($field) && emptyFields.length != requiredFields.length) {\r\n        const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\r\n        result = {\r\n          valid: false,\r\n          message: `The following fields cannot be provided when ${$name} is not set to an AJCC option: ${arrayFormatter(\r\n            errorFields,\r\n          )}`,\r\n        };\r\n      }\r\n    }\r\n    return result;\r\n  })","(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n        let result = {valid: true, message: \"Ok\"};\r\n        \r\n        /* required field, cannot be null */\r\n        if ($row.disease_status_at_followup != null) {\r\n           const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\r\n           const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \r\n           const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\r\n   \r\n           /* checks for a string just consisting of whitespace */\r\n           const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n           if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\r\n              result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\r\n           }\r\n           else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\r\n              result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\r\n           }\r\n        }\r\n        return  result;\r\n  })"]}}},"recurrence_stage_group":{"restrictions":{"codeList":{"left":["Stage 0","Stage 0a","Stage 0is","Stage I","Stage IA","Stage IA1","Stage IA2","Stage IA3","Stage IB","Stage IB1","Stage IB2","Stage IC","Stage IS","Stage IE","Stage II","Stage IIA","Stage IIA1","Stage IIA2","Stage IIE","Stage IIB","Stage IIC","Stage III","Stage IIIA","Stage IIIA1","Stage IIIA2","Stage IIIB","Stage IIIC","Stage IIIC1","Stage IIIC2","Stage IIID","Stage IV","Stage IVA","Stage IVA1","Stage IVA2","Stage IVB","Stage IVC","Occult carcinoma","Stage 1","Stage 1A","Stage 1B","Stage ISA","Stage ISB","Stage IEA","Stage IEB","Stage IIEA","Stage IIEB","Stage IIES","Stage IIESA","Stage IIESB","Stage IIS","Stage IISA","Stage IISB","Stage IIIE","Stage IIIEA","Stage IIIEB","Stage IIIES","Stage IIIESA","Stage IIIESB","Stage IIIS","Stage IIISA","Stage IIISB","Stage IAB","Stage A","Stage B","Stage C"],"right":["Occult Carcinoma","Stage 0","Stage 0a","Stage 0is","Stage 1","Stage 1A","Stage 1B","Stage A","Stage B","Stage C","Stage I","Stage IA","Stage IA1","Stage IA2","Stage IA3","Stage IAB","Stage IAE","Stage IAES","Stage IAS","Stage IB","Stage IB1","Stage IB2","Stage IBE","Stage IBES","Stage IBS","Stage IC","Stage IE","Stage IEA","Stage IEB","Stage IES","Stage II","Stage II bulky","Stage IIA","Stage IIA1","Stage IIA2","Stage IIAE","Stage IIAES","Stage IIAS","Stage IIB","Stage IIBE","Stage IIBES","Stage IIBS","Stage IIC","Stage IIE","Stage IIEA","Stage IIEB","Stage IIES","Stage III","Stage IIIA","Stage IIIA1","Stage IIIA2","Stage IIIAE","Stage IIIAES","Stage IIIAS","Stage IIIB","Stage IIIBE","Stage IIIBES","Stage IIIBS","Stage IIIC","Stage IIIC1","Stage IIIC2","Stage IIID","Stage IIIE","Stage IIIES","Stage IIIS","Stage IIS","Stage IS","Stage IV","Stage IVA","Stage IVA1","Stage IVA2","Stage IVAE","Stage IVAES","Stage IVAS","Stage IVB","Stage IVBE","Stage IVBES","Stage IVBS","Stage IVC","Stage IVE","Stage IVES","Stage IVS"],"data":{"added":["Occult Carcinoma","Stage IAE","Stage IAES","Stage IAS","Stage IBE","Stage IBES","Stage IBS","Stage IES","Stage II bulky","Stage IIAE","Stage IIAES","Stage IIAS","Stage IIBE","Stage IIBES","Stage IIBS","Stage IIIAE","Stage IIIAES","Stage IIIAS","Stage IIIBE","Stage IIIBES","Stage IIIBS","Stage IVAE","Stage IVAES","Stage IVAS","Stage IVBE","Stage IVBES","Stage IVBS","Stage IVE","Stage IVES","Stage IVS"],"deleted":["Occult carcinoma","Stage ISA","Stage ISB","Stage IIESA","Stage IIESB","Stage IISA","Stage IISB","Stage IIIEA","Stage IIIEB","Stage IIIESA","Stage IIIESB","Stage IIISA","Stage IIISB"]}},"script":{"left":["(function validate(inputs) {\r\n    const {$row, $name, $field} = inputs;\r\n    let result = { valid: true, message: 'Ok' };\r\n    const stagingName = $name\r\n      .trim()\r\n      .toLowerCase()\r\n      .split('_stage_group')[0];\r\n\r\n    const stagingSystem = stagingName + `_tumour_staging_system`;\r\n    \r\n    // checks for a string just consisting of whitespace\r\n    const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n \r\n    if ($row[stagingSystem] && (!$field || checkforEmpty($field))) {\r\n      result.valid = false;\r\n      const msg = `The ${stagingName}_stage_group must be submitted if the field ${stagingSystem} is submitted.`;\r\n      result.message = msg;\r\n    }\r\n    else if (!($row[stagingSystem]) && $field) {\r\n       result.valid = false;\r\n       const msg = `The field ${stagingSystem} must be submitted if ${stagingName}_stage_group is submitted.`;\r\n       result.message = msg;\r\n    }\r\n    else if ($row[stagingSystem] && $field) {\r\n      let codeList = [];\r\n      switch ($row[stagingSystem] && $row[stagingSystem].trim().toLowerCase()) {\r\n        case 'revised international staging system (riss)':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ii',\r\n            'stage iii'\r\n          ];\r\n          break;\r\n        case 'lugano staging system':\r\n          codeList = [\r\n             'stage i',\r\n             'stage ia',\r\n             'stage ib',\r\n             'stage ie',\r\n             'stage iea',\r\n             'stage ieb',\r\n             'stage ii',\r\n             'stage iia',\r\n             'stage iib',\r\n             'stage iie',\r\n             'stage iiea',\r\n             'stage iieb',\r\n             'stage iii',\r\n             'stage iiia',\r\n             'stage iiib',\r\n             'stage iv',\r\n             'stage iva',\r\n             'stage ivb'\r\n          ];\r\n          break;\r\n        case 'st jude staging system':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ii',\r\n            'stage iii',\r\n            'stage iv'\r\n          ];\r\n          break;\r\n        case 'ann arbor staging system':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ia',\r\n            'stage ib',\r\n            'stage ie',\r\n            'stage is',\r\n            'stage ii',\r\n            'stage iia',\r\n            'stage iib',\r\n            'stage iie',\r\n            'stage iis',\r\n            'stage iii',\r\n            'stage iiia',\r\n            'stage iiib',\r\n            'stage iiie',\r\n            'stage iiis',\r\n            'stage iv',\r\n            'stage iva',\r\n            'stage ivb',\r\n            'stage ive',\r\n            'stage ivs'\r\n          ];\r\n          break;\r\n        case 'rai staging system':\r\n          codeList = [\r\n             'stage 0',\r\n             'stage i',\r\n             'stage ii',\r\n             'stage iii',\r\n             'stage iv'\r\n          ];\r\n          break;\r\n        case 'durie-salmon staging system':\r\n          codeList = [\r\n            'stage 1',\r\n            'stage 1a',\r\n            'stage 1b',\r\n            'stage ii',\r\n            'stage iia',\r\n            'stage iib',\r\n            'stage iii',\r\n            'stage iiia',\r\n            'stage iiib'\r\n          ];\r\n          break;\r\n        case 'figo staging system':\r\n          codeList = [\r\n            'stage ia',\r\n            'stage ia1',\r\n            'stage ia2',\r\n            'stage ib',\r\n            'stage ib1',\r\n            'stage ib2',\r\n            'stage iia',\r\n            'stage iab',\r\n            'stage iiia',\r\n            'stage iiib',\r\n            'stage iva',\r\n            'stage ivb'\r\n          ];\r\n          break;\r\n        case 'binet staging system':\r\n          codeList = [\r\n             'stage a',\r\n             'stage b',\r\n             'stage c'\r\n         ];\r\n          break;\r\n        case 'ajcc 8th edition':\r\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'];\r\n          break;\r\n        case 'ajcc 7th edition':\r\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'\r\n];\r\n          break;\r\n        default:\r\n          codelist = [];\r\n      }\r\n\r\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\r\n        const msg = `'${$field}' is not a permissible value. When '${stagingSystem}' is set to '${\r\n          $row[stagingSystem]\r\n        }', '${stagingName}_stage_group' must be one of the following: \\n${codeList\r\n          .map(code => `- \"${code}\"`)\r\n          .join('\\n')}`;\r\n\r\n        result.valid = false;\r\n        result.message = msg;\r\n      }\r\n    }\r\n    \r\n    return result;\r\n  })"],"right":["(function validate(inputs) {\r\n    const {$row, $name, $field} = inputs;\r\n    let result = { valid: true, message: 'Ok' };\r\n    const stagingName = $name\r\n      .trim()\r\n      .toLowerCase()\r\n      .split('_stage_group')[0];\r\n\r\n    const stagingSystem = stagingName + `_tumour_staging_system`;\r\n    \r\n    /* checks for a string just consisting of whitespace */\r\n    const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n \r\n    if ($row[stagingSystem] && (!$field || checkforEmpty($field))) {\r\n      result.valid = false;\r\n      const msg = `The ${stagingName}_stage_group must be submitted if the field ${stagingSystem} is submitted.`;\r\n      result.message = msg;\r\n    }\r\n    else if (!($row[stagingSystem]) && $field) {\r\n       result.valid = false;\r\n       const msg = `The field ${stagingSystem} must be submitted if ${stagingName}_stage_group is submitted.`;\r\n       result.message = msg;\r\n    }\r\n    else if ($row[stagingSystem] && $field) {\r\n      let codeList = [];\r\n      switch ($row[stagingSystem] && $row[stagingSystem].trim().toLowerCase()) {\r\n        case 'revised international staging system (riss)':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ii',\r\n            'stage iii'\r\n          ];\r\n          break;\r\n        case 'lugano staging system':\r\n          codeList = [\r\n             'stage i',\r\n             'stage ia',\r\n             'stage ib',\r\n             'stage ie',\r\n             'stage iea',\r\n             'stage ieb',\r\n             'stage ii',\r\n             'stage ii bulky',\r\n             'stage iia',\r\n             'stage iib',\r\n             'stage iie',\r\n             'stage iiea',\r\n             'stage iieb',\r\n             'stage iii',\r\n             'stage iiia',\r\n             'stage iiib',\r\n             'stage iv',\r\n             'stage iva',\r\n             'stage ivb'\r\n          ];\r\n          break;\r\n        case 'st jude staging system':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ii',\r\n            'stage iii',\r\n            'stage iv'\r\n          ];\r\n          break;\r\n        case 'ann arbor staging system':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ia',\r\n            'stage ie',\r\n            'stage is',\r\n            'stage ies',\r\n            'stage iae',\r\n            'stage ias',\r\n            'stage iaes',\r\n            'stage ib',\r\n            'stage ibe',\r\n            'stage ibs',\r\n            'stage ibes',\r\n            'stage ii',\r\n            'stage iia',\r\n            'stage iie',\r\n            'stage iis',\r\n            'stage iies',\r\n            'stage iiae',\r\n            'stage iias',\r\n            'stage iiaes',\r\n            'stage iib',\r\n            'stage iibe',\r\n            'stage iibs',\r\n            'stage iibes',\r\n            'stage iii',\r\n            'stage iiia',\r\n            'stage iiie',\r\n            'stage iiis',\r\n            'stage iiies',\r\n            'stage iiiae',\r\n            'stage iiias',\r\n            'stage iiiaes',\r\n            'stage iiib',\r\n            'stage iiibe',\r\n            'stage iiibs',\r\n            'stage iiibes',\r\n            'stage iv',\r\n            'stage iva',\r\n            'stage ive',\r\n            'stage ivs',\r\n            'stage ives',\r\n            'stage ivae',\r\n            'stage ivas',\r\n            'stage ivaes',\r\n            'stage ivb',\r\n            'stage ivbe',\r\n            'stage ivbs',\r\n            'stage ivbes'\r\n          ];\r\n          break;\r\n        case 'rai staging system':\r\n          codeList = [\r\n             'stage 0',\r\n             'stage i',\r\n             'stage ii',\r\n             'stage iii',\r\n             'stage iv'\r\n          ];\r\n          break;\r\n        case 'durie-salmon staging system':\r\n          codeList = [\r\n            'stage 1',\r\n            'stage 1a',\r\n            'stage 1b',\r\n            'stage ii',\r\n            'stage iia',\r\n            'stage iib',\r\n            'stage iii',\r\n            'stage iiia',\r\n            'stage iiib'\r\n          ];\r\n          break;\r\n        case 'figo staging system':\r\n          codeList = [\r\n            'stage ia',\r\n            'stage ia1',\r\n            'stage ia2',\r\n            'stage ib',\r\n            'stage ib1',\r\n            'stage ib2',\r\n            'stage iia',\r\n            'stage iab',\r\n            'stage iiia',\r\n            'stage iiib',\r\n            'stage iva',\r\n            'stage ivb'\r\n          ];\r\n          break;\r\n        case 'binet staging system':\r\n          codeList = [\r\n             'stage a',\r\n             'stage b',\r\n             'stage c'\r\n         ];\r\n          break;\r\n        case 'ajcc 8th edition':\r\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'];\r\n          break;\r\n        case 'ajcc 7th edition':\r\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'\r\n];\r\n          break;\r\n        default:\r\n          codelist = [];\r\n      }\r\n\r\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\r\n        const msg = `'${$field}' is not a permissible value. When '${stagingSystem}' is set to '${\r\n          $row[stagingSystem]\r\n        }', '${stagingName}_stage_group' must be one of the following: \\n${codeList\r\n          .map(code => `- \"${code}\"`)\r\n          .join('\\n')}`;\r\n\r\n        result.valid = false;\r\n        result.message = msg;\r\n      }\r\n    }\r\n    \r\n    return result;\r\n  })"]}}},"posttherapy_stage_group":{"restrictions":{"codeList":{"left":["Stage 0","Stage 0a","Stage 0is","Stage I","Stage IA","Stage IA1","Stage IA2","Stage IA3","Stage IB","Stage IB1","Stage IB2","Stage IC","Stage IS","Stage IE","Stage II","Stage IIA","Stage IIA1","Stage IIA2","Stage IIE","Stage IIB","Stage IIC","Stage III","Stage IIIA","Stage IIIA1","Stage IIIA2","Stage IIIB","Stage IIIC","Stage IIIC1","Stage IIIC2","Stage IIID","Stage IV","Stage IVA","Stage IVA1","Stage IVA2","Stage IVB","Stage IVC","Occult carcinoma","Stage 1","Stage 1A","Stage 1B","Stage ISA","Stage ISB","Stage IEA","Stage IEB","Stage IIEA","Stage IIEB","Stage IIES","Stage IIESA","Stage IIESB","Stage IIS","Stage IISA","Stage IISB","Stage IIIE","Stage IIIEA","Stage IIIEB","Stage IIIES","Stage IIIESA","Stage IIIESB","Stage IIIS","Stage IIISA","Stage IIISB","Stage IAB","Stage A","Stage B","Stage C"],"right":["Occult Carcinoma","Stage 0","Stage 0a","Stage 0is","Stage 1","Stage 1A","Stage 1B","Stage A","Stage B","Stage C","Stage I","Stage IA","Stage IA1","Stage IA2","Stage IA3","Stage IAB","Stage IAE","Stage IAES","Stage IAS","Stage IB","Stage IB1","Stage IB2","Stage IBE","Stage IBES","Stage IBS","Stage IC","Stage IE","Stage IEA","Stage IEB","Stage IES","Stage II","Stage II bulky","Stage IIA","Stage IIA1","Stage IIA2","Stage IIAE","Stage IIAES","Stage IIAS","Stage IIB","Stage IIBE","Stage IIBES","Stage IIBS","Stage IIC","Stage IIE","Stage IIEA","Stage IIEB","Stage IIES","Stage III","Stage IIIA","Stage IIIA1","Stage IIIA2","Stage IIIAE","Stage IIIAES","Stage IIIAS","Stage IIIB","Stage IIIBE","Stage IIIBES","Stage IIIBS","Stage IIIC","Stage IIIC1","Stage IIIC2","Stage IIID","Stage IIIE","Stage IIIES","Stage IIIS","Stage IIS","Stage IS","Stage IV","Stage IVA","Stage IVA1","Stage IVA2","Stage IVAE","Stage IVAES","Stage IVAS","Stage IVB","Stage IVBE","Stage IVBES","Stage IVBS","Stage IVC","Stage IVE","Stage IVES","Stage IVS"],"data":{"added":["Occult Carcinoma","Stage IAE","Stage IAES","Stage IAS","Stage IBE","Stage IBES","Stage IBS","Stage IES","Stage II bulky","Stage IIAE","Stage IIAES","Stage IIAS","Stage IIBE","Stage IIBES","Stage IIBS","Stage IIIAE","Stage IIIAES","Stage IIIAS","Stage IIIBE","Stage IIIBES","Stage IIIBS","Stage IVAE","Stage IVAES","Stage IVAS","Stage IVBE","Stage IVBES","Stage IVBS","Stage IVE","Stage IVES","Stage IVS"],"deleted":["Occult carcinoma","Stage ISA","Stage ISB","Stage IIESA","Stage IIESB","Stage IISA","Stage IISB","Stage IIIEA","Stage IIIEB","Stage IIIESA","Stage IIIESB","Stage IIISA","Stage IIISB"]}},"script":{"left":["(function validate(inputs) {\r\n    const {$row, $name, $field} = inputs;\r\n    let result = { valid: true, message: 'Ok' };\r\n    const stagingName = $name\r\n      .trim()\r\n      .toLowerCase()\r\n      .split('_stage_group')[0];\r\n\r\n    const stagingSystem = stagingName + `_tumour_staging_system`;\r\n    \r\n    // checks for a string just consisting of whitespace\r\n    const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n \r\n    if ($row[stagingSystem] && (!$field || checkforEmpty($field))) {\r\n      result.valid = false;\r\n      const msg = `The ${stagingName}_stage_group must be submitted if the field ${stagingSystem} is submitted.`;\r\n      result.message = msg;\r\n    }\r\n    else if (!($row[stagingSystem]) && $field) {\r\n       result.valid = false;\r\n       const msg = `The field ${stagingSystem} must be submitted if ${stagingName}_stage_group is submitted.`;\r\n       result.message = msg;\r\n    }\r\n    else if ($row[stagingSystem] && $field) {\r\n      let codeList = [];\r\n      switch ($row[stagingSystem] && $row[stagingSystem].trim().toLowerCase()) {\r\n        case 'revised international staging system (riss)':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ii',\r\n            'stage iii'\r\n          ];\r\n          break;\r\n        case 'lugano staging system':\r\n          codeList = [\r\n             'stage i',\r\n             'stage ia',\r\n             'stage ib',\r\n             'stage ie',\r\n             'stage iea',\r\n             'stage ieb',\r\n             'stage ii',\r\n             'stage iia',\r\n             'stage iib',\r\n             'stage iie',\r\n             'stage iiea',\r\n             'stage iieb',\r\n             'stage iii',\r\n             'stage iiia',\r\n             'stage iiib',\r\n             'stage iv',\r\n             'stage iva',\r\n             'stage ivb'\r\n          ];\r\n          break;\r\n        case 'st jude staging system':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ii',\r\n            'stage iii',\r\n            'stage iv'\r\n          ];\r\n          break;\r\n        case 'ann arbor staging system':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ia',\r\n            'stage ib',\r\n            'stage ie',\r\n            'stage is',\r\n            'stage ii',\r\n            'stage iia',\r\n            'stage iib',\r\n            'stage iie',\r\n            'stage iis',\r\n            'stage iii',\r\n            'stage iiia',\r\n            'stage iiib',\r\n            'stage iiie',\r\n            'stage iiis',\r\n            'stage iv',\r\n            'stage iva',\r\n            'stage ivb',\r\n            'stage ive',\r\n            'stage ivs'\r\n          ];\r\n          break;\r\n        case 'rai staging system':\r\n          codeList = [\r\n             'stage 0',\r\n             'stage i',\r\n             'stage ii',\r\n             'stage iii',\r\n             'stage iv'\r\n          ];\r\n          break;\r\n        case 'durie-salmon staging system':\r\n          codeList = [\r\n            'stage 1',\r\n            'stage 1a',\r\n            'stage 1b',\r\n            'stage ii',\r\n            'stage iia',\r\n            'stage iib',\r\n            'stage iii',\r\n            'stage iiia',\r\n            'stage iiib'\r\n          ];\r\n          break;\r\n        case 'figo staging system':\r\n          codeList = [\r\n            'stage ia',\r\n            'stage ia1',\r\n            'stage ia2',\r\n            'stage ib',\r\n            'stage ib1',\r\n            'stage ib2',\r\n            'stage iia',\r\n            'stage iab',\r\n            'stage iiia',\r\n            'stage iiib',\r\n            'stage iva',\r\n            'stage ivb'\r\n          ];\r\n          break;\r\n        case 'binet staging system':\r\n          codeList = [\r\n             'stage a',\r\n             'stage b',\r\n             'stage c'\r\n         ];\r\n          break;\r\n        case 'ajcc 8th edition':\r\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'];\r\n          break;\r\n        case 'ajcc 7th edition':\r\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'\r\n];\r\n          break;\r\n        default:\r\n          codelist = [];\r\n      }\r\n\r\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\r\n        const msg = `'${$field}' is not a permissible value. When '${stagingSystem}' is set to '${\r\n          $row[stagingSystem]\r\n        }', '${stagingName}_stage_group' must be one of the following: \\n${codeList\r\n          .map(code => `- \"${code}\"`)\r\n          .join('\\n')}`;\r\n\r\n        result.valid = false;\r\n        result.message = msg;\r\n      }\r\n    }\r\n    \r\n    return result;\r\n  })"],"right":["(function validate(inputs) {\r\n    const {$row, $name, $field} = inputs;\r\n    let result = { valid: true, message: 'Ok' };\r\n    const stagingName = $name\r\n      .trim()\r\n      .toLowerCase()\r\n      .split('_stage_group')[0];\r\n\r\n    const stagingSystem = stagingName + `_tumour_staging_system`;\r\n    \r\n    /* checks for a string just consisting of whitespace */\r\n    const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n \r\n    if ($row[stagingSystem] && (!$field || checkforEmpty($field))) {\r\n      result.valid = false;\r\n      const msg = `The ${stagingName}_stage_group must be submitted if the field ${stagingSystem} is submitted.`;\r\n      result.message = msg;\r\n    }\r\n    else if (!($row[stagingSystem]) && $field) {\r\n       result.valid = false;\r\n       const msg = `The field ${stagingSystem} must be submitted if ${stagingName}_stage_group is submitted.`;\r\n       result.message = msg;\r\n    }\r\n    else if ($row[stagingSystem] && $field) {\r\n      let codeList = [];\r\n      switch ($row[stagingSystem] && $row[stagingSystem].trim().toLowerCase()) {\r\n        case 'revised international staging system (riss)':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ii',\r\n            'stage iii'\r\n          ];\r\n          break;\r\n        case 'lugano staging system':\r\n          codeList = [\r\n             'stage i',\r\n             'stage ia',\r\n             'stage ib',\r\n             'stage ie',\r\n             'stage iea',\r\n             'stage ieb',\r\n             'stage ii',\r\n             'stage ii bulky',\r\n             'stage iia',\r\n             'stage iib',\r\n             'stage iie',\r\n             'stage iiea',\r\n             'stage iieb',\r\n             'stage iii',\r\n             'stage iiia',\r\n             'stage iiib',\r\n             'stage iv',\r\n             'stage iva',\r\n             'stage ivb'\r\n          ];\r\n          break;\r\n        case 'st jude staging system':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ii',\r\n            'stage iii',\r\n            'stage iv'\r\n          ];\r\n          break;\r\n        case 'ann arbor staging system':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ia',\r\n            'stage ie',\r\n            'stage is',\r\n            'stage ies',\r\n            'stage iae',\r\n            'stage ias',\r\n            'stage iaes',\r\n            'stage ib',\r\n            'stage ibe',\r\n            'stage ibs',\r\n            'stage ibes',\r\n            'stage ii',\r\n            'stage iia',\r\n            'stage iie',\r\n            'stage iis',\r\n            'stage iies',\r\n            'stage iiae',\r\n            'stage iias',\r\n            'stage iiaes',\r\n            'stage iib',\r\n            'stage iibe',\r\n            'stage iibs',\r\n            'stage iibes',\r\n            'stage iii',\r\n            'stage iiia',\r\n            'stage iiie',\r\n            'stage iiis',\r\n            'stage iiies',\r\n            'stage iiiae',\r\n            'stage iiias',\r\n            'stage iiiaes',\r\n            'stage iiib',\r\n            'stage iiibe',\r\n            'stage iiibs',\r\n            'stage iiibes',\r\n            'stage iv',\r\n            'stage iva',\r\n            'stage ive',\r\n            'stage ivs',\r\n            'stage ives',\r\n            'stage ivae',\r\n            'stage ivas',\r\n            'stage ivaes',\r\n            'stage ivb',\r\n            'stage ivbe',\r\n            'stage ivbs',\r\n            'stage ivbes'\r\n          ];\r\n          break;\r\n        case 'rai staging system':\r\n          codeList = [\r\n             'stage 0',\r\n             'stage i',\r\n             'stage ii',\r\n             'stage iii',\r\n             'stage iv'\r\n          ];\r\n          break;\r\n        case 'durie-salmon staging system':\r\n          codeList = [\r\n            'stage 1',\r\n            'stage 1a',\r\n            'stage 1b',\r\n            'stage ii',\r\n            'stage iia',\r\n            'stage iib',\r\n            'stage iii',\r\n            'stage iiia',\r\n            'stage iiib'\r\n          ];\r\n          break;\r\n        case 'figo staging system':\r\n          codeList = [\r\n            'stage ia',\r\n            'stage ia1',\r\n            'stage ia2',\r\n            'stage ib',\r\n            'stage ib1',\r\n            'stage ib2',\r\n            'stage iia',\r\n            'stage iab',\r\n            'stage iiia',\r\n            'stage iiib',\r\n            'stage iva',\r\n            'stage ivb'\r\n          ];\r\n          break;\r\n        case 'binet staging system':\r\n          codeList = [\r\n             'stage a',\r\n             'stage b',\r\n             'stage c'\r\n         ];\r\n          break;\r\n        case 'ajcc 8th edition':\r\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'];\r\n          break;\r\n        case 'ajcc 7th edition':\r\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'\r\n];\r\n          break;\r\n        default:\r\n          codelist = [];\r\n      }\r\n\r\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\r\n        const msg = `'${$field}' is not a permissible value. When '${stagingSystem}' is set to '${\r\n          $row[stagingSystem]\r\n        }', '${stagingName}_stage_group' must be one of the following: \\n${codeList\r\n          .map(code => `- \"${code}\"`)\r\n          .join('\\n')}`;\r\n\r\n        result.valid = false;\r\n        result.message = msg;\r\n      }\r\n    }\r\n    \r\n    return result;\r\n  })"]}}}},"created":{"anatomic_site_progression_or_recurrence":{"changeType":"created","description":"Indicate the ICD-O-3 topography code for the anatomic site where disease progression, relapse or recurrence occurred, according to the International Classification of Diseases for Oncology, 3rd Edition (WHO ICD-O-3). Refer to the ICD-O-3 manual for guidelines at https://apps.who.int/iris/handle/10665/42344.","name":"anatomic_site_progression_or_recurrence","valueType":"string","restrictions":{"script":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n        let result = {valid: true, message: \"Ok\"};\r\n        \r\n        /* required field, cannot be null */\r\n        if ($row.disease_status_at_followup != null) {\r\n           const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\r\n           const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \r\n           const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\r\n   \r\n           /* checks for a string just consisting of whitespace */\r\n           const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n           if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\r\n              result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\r\n           }\r\n           else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\r\n              result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\r\n           }\r\n        }\r\n        return  result;\r\n  })"],"regex":"^[C][0-9]{2}(.[0-9]{1})?$"},"meta":{"core":true,"dependsOn":"follow_up.disease_status_at_followup","displayName":"Anatomic Site Progression or Recurrences","examples":"C50.1,C18","notes":"This field is required to be submitted if disease_status_at_followup indicates a state of progression, relapse, or recurrence."}}},"deleted":{"anatomic_site_progression_or_recurrences":{"changeType":"deleted","description":"Indicate the ICD-O-3 topography code for the anatomic site where disease progression, relapse or recurrence occurred, according to the International Classification of Diseases for Oncology, 3rd Edition (WHO ICD-O-3). Refer to the ICD-O-3 manual for guidelines at https://apps.who.int/iris/handle/10665/42344.","name":"anatomic_site_progression_or_recurrences","valueType":"string","restrictions":{"script":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n        let result = {valid: true, message: \"Ok\"};\r\n        \r\n        /* required field, cannot be null */\r\n        const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\r\n    \r\n        const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \r\n        const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\r\n   \r\n        // checks for a string just consisting of whitespace\r\n        const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n\r\n        if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\r\n            result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\r\n        }\r\n        else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\r\n            result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\r\n        }\r\n        return  result;\r\n    })"],"regex":"^[C][0-9]{2}(.[0-9]{1})?$"},"meta":{"core":true,"dependsOn":"follow_up.disease_status_at_followup","displayName":"Anatomic Site Progression or Recurrences","examples":"C50.1,C18","notes":"This field is required to be submitted if disease_status_at_followup indicates a state of progression, relapse, or recurrence."}}}},"immunotherapy":{"updated":{},"created":{"program_id":{"changeType":"created","name":"program_id","valueType":"string","description":"Unique identifier of the ARGO program.","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.program_id","displayName":"Program ID"},"restrictions":{"required":true}},"submitter_donor_id":{"changeType":"created","name":"submitter_donor_id","valueType":"string","description":"Unique identifier of the donor, assigned by the data provider.","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.submitter_donor_id","displayName":"Submitter Donor ID"},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,64}"}},"submitter_treatment_id":{"changeType":"created","name":"submitter_treatment_id","valueType":"string","description":"Unique identifier of the treatment, assigned by the data provider.","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"treatment.submitter_treatment_id","displayName":"Submitter Treatment ID"},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,64}"}},"immunotherapy_type":{"changeType":"created","name":"immunotherapy_type","valueType":"string","description":"Indicate the type of immunotherapy administered to donor.","meta":{"displayName":"Immunotherapy Type"},"restrictions":{"required":true,"codeList":["Cell-based","Immune checkpoint inhibitors","Monoclonal antibodies other than immune checkpoint inhibitors","Other immunomodulatory substances"]}},"drug_rxnormcui":{"changeType":"created","name":"drug_rxnormcui","description":"The unique RxNormID assigned to the treatment regimen drug.","valueType":"string","meta":{"validationDependency":true,"core":true,"notes":"This field uses standardized vocabulary from the RxNorm database (https://www.nlm.nih.gov/research/umls/rxnorm), provided by the NIH.\n\nYou can search for RX Norm values through the web interface (https://mor.nlm.nih.gov/RxNav/) or API (https://mor.nlm.nih.gov/download/rxnav/RxNormAPIs.html).\n\nFor example, to find the rxnormcui based on drug name, you can use: https://rxnav.nlm.nih.gov/REST/rxcui.json?name=leucovorin or https://mor.nlm.nih.gov/RxNav/search?searchBy=String&searchTerm=leucovorin","displayName":"RxNormCUI"},"restrictions":{"required":true}},"drug_name":{"changeType":"created","name":"drug_name","description":"Name of agent or drug administered to donor as part of the treatment regimen.","valueType":"string","meta":{"validationDependency":true,"core":true,"notes":"This field uses standardized vocabulary from the RxNorm database (https://www.nlm.nih.gov/research/umls/rxnorm), provided by the NIH.\n\nYou can search for RX Norm values through the web interface (https://mor.nlm.nih.gov/RxNav/) or API (https://mor.nlm.nih.gov/download/rxnav/RxNormAPIs.html).\n\nFor example, to find the rxnormcui based on drug name, you can use: https://rxnav.nlm.nih.gov/REST/rxcui.json?name=leucovorin or https://mor.nlm.nih.gov/RxNav/search?searchBy=String&searchTerm=leucovorin","displayName":"Immunotherapy Drug Name"},"restrictions":{"required":true}}},"deleted":{}},"exposure":{"updated":{},"created":{"program_id":{"changeType":"created","name":"program_id","valueType":"string","description":"Unique identifier of the ARGO program.","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.program_id","displayName":"Program ID"},"restrictions":{"required":true}},"submitter_donor_id":{"changeType":"created","description":"Unique identifier of the donor, assigned by the data provider.","name":"submitter_donor_id","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.submitter_donor_id","displayName":"Submitter Donor ID"},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,64}"}},"tobacco_smoking_status":{"changeType":"created","description":"Indicate donor's self-reported smoking status and history. (Reference: caDSR CDE ID 2181650)","name":"tobacco_smoking_status","valueType":"string","meta":{"displayName":"Tobacco Smoking Status","notes":"Current smoker: Has smoked 100 cigarettes in their lifetime and who currently smokes. Includes daily smokers and non-daily smokers (also known as occassional smokers). Current reformed smoker for >15 years: A person who currently does not smoke and has been a non-smoker for more than 15 years, but has smoked at least 100 cigarettes in their life. Current reformed smoker for <= 15 years: A person who currently does not smoke and has been a non-smoker for less than 15 years, but has smoked at least 100 cigarettes in their life. Current reformed smoker, duration not specified: A person who currently does not smoke and has been a non-smoker for unspecified time, but has smoked at least 100 cigarettes in their lifetime. Smoking history not documented: Smoking history has not be recorded or is unknown."},"restrictions":{"codeList":["Current reformed smoker for <= 15 years","Current reformed smoker for > 15 years","Current reformed smoker, duration not specified","Current smoker","Lifelong non-smoker (<100 cigarettes smoked in lifetime)","Smoking history not documented"]}},"tobacco_type":{"changeType":"created","description":"Indicate the type(s) of tobacco used by donor. (Reference: NCIt CDE C177629)","name":"tobacco_type","valueType":"string","meta":{"displayName":"Tobacco Type","dependsOn":"exposure.tobacco_smoking_status","notes":"To include multiple values, separate values with a pipe delimiter '|' within your file."},"isArray":true,"restrictions":{"codeList":["Chewing Tobacco","Cigar","Cigarettes","Electronic cigarettes","Roll-ups","Snuff","Unknown","Waterpipe"],"script":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      const smokerCategories = ['current reformed smoker for <= 15 years', 'current reformed smoker for > 15 years', 'current reformed smoker, duration not specified', 'current smoker'];\r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n      // check tobacco related fields\r\n      if ($name === 'tobacco_type') {\r\n         if ($row.tobacco_type != null && !(checkforEmpty($row.tobacco_type))) {\r\n            if (!$row.tobacco_smoking_status || checkforEmpty($row.tobacco_smoking_status) || $row.tobacco_smoking_status === null) {\r\n               result = { valid: false, message: `If '${$name}' is submitted, then the 'tobacco_smoking_status' field is required.`}\r\n            }\r\n            else if ($row.tobacco_smoking_status.toLowerCase() === 'smoking history not documented') {\r\n               result = { valid: false, message: `The 'tobacco_smoking_status' field (smoking status not documented) is inconsistent if donor smoked '${$row.tobacco_type}'.`};\r\n            }\r\n            else if ($row.tobacco_smoking_status.toLowerCase() === 'lifelong non-smoker (<100 cigarettes smoked in lifetime)') {\r\n               result = { valid: false, message: `The '${$name}' field should not be submitted if donor is a lifelong non-smoker.`}\r\n            }\r\n         }\r\n         else {\r\n            if ($row.tobacco_smoking_status != null && !(checkforEmpty($row.tobacco_smoking_status))) {\r\n               if (smokerCategories.includes($row.tobacco_smoking_status.toLowerCase())) {\r\n                  result = { valid: false, message: `The '${$name}' field is required if donor is or was a smoker.`}\r\n               }\r\n            }\r\n         }\r\n      }\r\n      else if ($name === 'pack_years_smoked' && $row.pack_years_smoked != null && !(checkforEmpty($row.pack_years_smoked))) {\r\n        if ((!$row.tobacco_smoking_status || $row.tobacco_smoking_status === null || (!smokerCategories.includes($row.tobacco_smoking_status.trim().toLowerCase()))) && ($row.pack_years_smoked != null || !(checkforEmpty($row.pack_years_smoked)))) {\r\n           result = {valid: false, message: `The '${$name}' field should not be submitted if donor does not have a history of smoking.`}\r\n        }\r\n     }\r\n     return result;\r\n  })"]}},"pack_years_smoked":{"changeType":"created","description":"This field applies to cigarettes. Indicate the smoking intensity in Pack Years, where the number of pack years is defined as the number of cigarettes smoked per day times (x) the number of years smoked divided (/) by 20. (Reference: caDSR CDE ID 2955385)","name":"pack_years_smoked","valueType":"number","meta":{"displayName":"Pack Years Smoked","dependsOn":"exposure.tobacco_smoking_status"},"restrictions":{"range":{"min":0},"script":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      const smokerCategories = ['current reformed smoker for <= 15 years', 'current reformed smoker for > 15 years', 'current reformed smoker, duration not specified', 'current smoker'];\r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n      // check tobacco related fields\r\n      if ($name === 'tobacco_type') {\r\n         if ($row.tobacco_type != null && !(checkforEmpty($row.tobacco_type))) {\r\n            if (!$row.tobacco_smoking_status || checkforEmpty($row.tobacco_smoking_status) || $row.tobacco_smoking_status === null) {\r\n               result = { valid: false, message: `If '${$name}' is submitted, then the 'tobacco_smoking_status' field is required.`}\r\n            }\r\n            else if ($row.tobacco_smoking_status.toLowerCase() === 'smoking history not documented') {\r\n               result = { valid: false, message: `The 'tobacco_smoking_status' field (smoking status not documented) is inconsistent if donor smoked '${$row.tobacco_type}'.`};\r\n            }\r\n            else if ($row.tobacco_smoking_status.toLowerCase() === 'lifelong non-smoker (<100 cigarettes smoked in lifetime)') {\r\n               result = { valid: false, message: `The '${$name}' field should not be submitted if donor is a lifelong non-smoker.`}\r\n            }\r\n         }\r\n         else {\r\n            if ($row.tobacco_smoking_status != null && !(checkforEmpty($row.tobacco_smoking_status))) {\r\n               if (smokerCategories.includes($row.tobacco_smoking_status.toLowerCase())) {\r\n                  result = { valid: false, message: `The '${$name}' field is required if donor is or was a smoker.`}\r\n               }\r\n            }\r\n         }\r\n      }\r\n      else if ($name === 'pack_years_smoked' && $row.pack_years_smoked != null && !(checkforEmpty($row.pack_years_smoked))) {\r\n        if ((!$row.tobacco_smoking_status || $row.tobacco_smoking_status === null || (!smokerCategories.includes($row.tobacco_smoking_status.trim().toLowerCase()))) && ($row.pack_years_smoked != null || !(checkforEmpty($row.pack_years_smoked)))) {\r\n           result = {valid: false, message: `The '${$name}' field should not be submitted if donor does not have a history of smoking.`}\r\n        }\r\n     }\r\n     return result;\r\n  })"]}},"alcohol_history":{"changeType":"created","description":"Indicate if the donor has consumed at least 12 drinks of any alcoholic beverage in their lifetime. (Reference: caDSR CDE ID 2201918)","name":"alcohol_history","valueType":"string","meta":{"displayName":"Alcohol History"},"restrictions":{"codeList":["Yes","No","Unknown"],"script":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      \r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n      alcoholHistoryCategories = [\"daily drinker\", \"occasional drinker (< once a month)\", \"social drinker (> once a month, < once a week)\", \"weekly drinker (>=1x a week)\"];\r\n      noOrUnknownAllowedCategories = [\"none\", \"occasional drinker (< once a month)\", \"unknown\"];\r\n       \r\n      if ($row.alcohol_consumption_category && $row.alcohol_consumption_category != null && !(checkforEmpty($row.alcohol_consumption_category))) {\r\n         alcoholConsumptionCategory = $row.alcohol_consumption_category.trim().toLowerCase();\r\n         if ((!$field || $field == null || checkforEmpty($field)) && alcoholHistoryCategories.includes(alcoholConsumptionCategory)) {\r\n            result = {valid:false, message: `If the donor is a '${alcoholConsumptionCategory}', then the 'alcohol_history' field must be submitted as well.`};\r\n         }\r\n         if ((!$field || $field === null || checkforEmpty($field) || $field.trim().toLowerCase() === 'no') && (!(noOrUnknownAllowedCategories.includes(alcoholConsumptionCategory)))) {\r\n            result = {valid:false, message: `If the donor is a '${alcoholConsumptionCategory}', then the 'alcohol_history' field must be submitted as 'Yes'.`};\r\n         }\r\n      }\r\n      return result;\r\n  })"]}},"alcohol_consumption_category":{"changeType":"created","description":"Describe the donor's current level of alcohol use as self-reported by the donor. (Reference: caDSR CDE ID 3457767)","name":"alcohol_consumption_category","valueType":"string","meta":{"displayName":"Alcohol Consumption Category","notes":""},"restrictions":{"codeList":["Daily Drinker","None","Occasional Drinker (< once a month)","Social Drinker (> once a month, < once a week)","Unknown","Weekly Drinker (>=1x a week)"],"script":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      \r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n      \r\n      alcoholHistoryCategories = [\"daily drinker\", \"occasional drinker (< once a month)\", \"social drinker (> once a month, < once a week)\", \"weekly drinker (>=1x a week)\"];\r\n    \r\n      if (!$field || $field === null || checkforEmpty($field)) {\r\n         if ($row.alcohol_history && $row.alcohol_history != null && !(checkforEmpty($row.alcohol_history)) && $row.alcohol_history.trim().toLowerCase() === 'yes') {\r\n            result = {valid:false, message: `The '${$name}' field must be submitted if donor has an alcohol history.`};\r\n         }\r\n      }\r\n      else {\r\n         alcoholConsumptionCategory = $field.trim().toLowerCase();\r\n         if (alcoholHistoryCategories.includes(alcoholConsumptionCategory) && (!$row.alcohol_history || $row.alcohol_history === null || checkforEmpty($row.alcohol_history))) {\r\n            result = {valid:false, message: `The 'alcohol_history' field must be submitted if donor is a '${alcoholConsumptionCategory}'.`};\r\n         }\r\n      }\r\n      return result;\r\n  })"]}},"alcohol_type":{"changeType":"created","description":"Indicate the type(s) of alcohol the donor consumes. (Reference: NCIt CDE C173647)","name":"alcohol_type","valueType":"string","meta":{"displayName":"Alcohol Type","dependsOn":"exposure.alcohol_consumption_category","notes":"To include multiple values, separate values with a pipe delimiter '|' within your file."},"isArray":true,"restrictions":{"codeList":["Beer","Liquor","Other","Unknown","Wine"],"script":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      \r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n      exclusionTerms = [\"no\", \"none\", \"unknown\"]; \r\n      requiresAlcoholType = [\"daily drinker\", \"occasional drinker (< once a month)\", \"social drinker (> once a month, < once a week)\", \"weekly drinker (>=1x a week)\"];\r\n    \r\n      if ($row.alcohol_consumption_category && $row.alcohol_consumption_category != null && !(checkforEmpty($row.alcohol_consumption_category))) {\r\n         alcoholConsumptionCategory = $row.alcohol_consumption_category.trim().toLowerCase();\r\n         if ($field && $field != null && !(checkforEmpty($field))) {\r\n            if (exclusionTerms.includes(alcoholConsumptionCategory)) {\r\n               result = {valid: false, message: `If the 'alcohol_consumption_category' field is '${alcoholConsumptionCategory}', then the 'alcohol_type' field should not be submitted.`};\r\n            }\r\n         }\r\n         else {\r\n            if (requiresAlcoholType.includes(alcoholConsumptionCategory)) {\r\n               result = {valid: false, message: `If the 'alcohol_consumption_category' field is '${alcoholConsumptionCategory}', then the 'alcohol_type' field must be submitted.`};\r\n            }\r\n         }\r\n      }\r\n      if ($field && $field != null && !(checkforEmpty($field)) && (!$row.alcohol_consumption_category || $row.alcohol_consumption_category === null || checkforEmpty($row.alcohol_consumption_category))) {\r\n         result = {valid: false, message: `The 'alcohol_consumption_category' field is required if the '${$name}' field is submitted.`};\r\n      }\r\n      return result;\r\n  })"]}},"opiate_use":{"changeType":"created","description":"Indicate if the donor has ever used opium or other opiates like opium juice, heroin, or Sukhteh regularly (at least weekly over a 6-month period).","name":"opiate_use","valueType":"string","meta":{"displayName":"Opiate Use"},"restrictions":{"codeList":["Never","Unknown","Yes, currently","Yes, only in the past"]}},"hot_drinks_consumption":{"changeType":"created","description":"Indicate if the donor regularly drinks tea, coffee, or other hot drinks.","name":"hot_drinks_consumption","valueType":"string","meta":{"displayName":"Hot Drink Consumption"},"restrictions":{"codeList":["Never","Unknown","Yes, currently","Yes, only in the past"]}},"red_meat_frequency":{"changeType":"created","description":"Indicate how frequently the donor eats red meat. Examples of red meat include beef, veal, pork, lamb, mutton, horse, or goat meat.","name":"red_meat_frequency","valueType":"string","meta":{"displayName":"Red Meat Consumption Frequency"},"restrictions":{"codeList":["Never","Less than once a month","1-3 times a month","Once or twice a week","Most days but not every day","Every day","Unknown"]}},"processed_meat_frequency":{"changeType":"created","description":"Indicate how frequently the patient eats processed meat. Examples of processed meat include hams, salamis, or sausages.","name":"processed_meat_frequency","valueType":"string","meta":{"displayName":"Processed Meat Consumption Frequency"},"restrictions":{"codeList":["Never","Less than once a month","1-3 times a month","Once or twice a week","Most days but not every day","Every day","Unknown"]}},"soft_drinks_frequency":{"changeType":"created","description":"Indicate the frequency of soft drink consumption by the donor.","name":"soft_drinks_frequency","valueType":"string","meta":{"displayName":"Soft Drink Consumption Frequency"},"restrictions":{"codeList":["Never","Less than once a month","1-3 times a month","Once or twice a week","Most days but not every day","Every day","Unknown"]}},"exercise_frequency":{"changeType":"created","description":"Indicate how many times per week the donor exercises for at least 30 minutes. (Reference: NCIt CDE C25367)","name":"exercise_frequency","valueType":"string","meta":{"displayName":"Exercise Frequency"},"restrictions":{"codeList":["Never","Less than once a month","1-3 times a month","Once or twice a week","Most days but not every day","Every day","Unknown"]}},"exercise_intensity":{"changeType":"created","description":"Indicate the intensity of exercise. (Reference: NCIt CDE C25539)","name":"exercise_intensity","valueType":"string","meta":{"displayName":"Exercise Intensity","dependsOn":"exposure.exercise_frequency"},"restrictions":{"codeList":["Low: No increase in the heart beat, and no perspiration","Moderate: Increase in the heart beat slightly with some light perspiration","Vigorous: Increase in the heart beat substantially with heavy perspiration"],"script":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      \r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n     \r\n      if ($field != null || !(checkforEmpty($field))) {\r\n         if ($row.exercise_frequency && $row.exercise_frequency != null && !(checkforEmpty($row.exercise_frequency)) && $row.exercise_frequency.trim().toLowerCase() === \"never\") {\r\n            result = {valid: false, message: `The 'exercise_frequency' field cannot be 'never' if the '${$name}' field is submitted.`};\r\n         }\r\n      } \r\n      return result;\r\n  })"]}}},"deleted":{}},"family_history":{"updated":{},"created":{"program_id":{"changeType":"created","name":"program_id","valueType":"string","description":"Unique identifier of the ARGO program.","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.program_id","displayName":"Program ID"},"restrictions":{"required":true}},"submitter_donor_id":{"changeType":"created","description":"Unique identifier of the donor, assigned by the data provider.","name":"submitter_donor_id","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.submitter_donor_id","displayName":"Submitter Donor ID"},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,64}"}},"family_relative_id":{"changeType":"created","description":"Unique identifier of the relative, assigned by the data provider.","name":"family_relative_id","valueType":"string","meta":{"displayName":"Family Relative ID","notes":"This field is required to ensure that family members are identified in unique records.  Ids can be as simple as an incremented numeral to ensure uniqueness."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,64}"}},"relative_with_cancer_history":{"changeType":"created","description":"Indicate if donor has any genetic relatives with a history of cancer. (Reference: NCIt C159104, caDSR CDE ID 6161023)","name":"relative_with_cancer_history","restrictions":{"codeList":["Yes","No","Unknown"]},"valueType":"string","meta":{"displayName":"Relative with Cancer History"}},"relationship_type":{"changeType":"created","description":"Indicate genetic relationship of the relative to the donor. (Reference: caDSR CDE ID 2179937)","name":"relationship_type","restrictions":{"codeList":["Aunt","Brother","Cousin","Daughter","Father","Grandchild","Grandfather","Grandmother","Maternal Aunt","Maternal Cousin","Maternal Grandfather","Maternal Grandmother","Maternal Half-brother","Maternal Half-sister","Mother","Nephew","Niece","Other","Paternal Aunt","Paternal Cousin","Paternal Grandfather","Paternal Grandmother","Paternal Half-brother","Paternal Half-sister","Sister","Son","Unknown"]},"valueType":"string","meta":{"displayName":"Relationship Type"}},"gender_of_relative":{"changeType":"created","description":"The self-reported gender of related individual.","name":"gender_of_relative","restrictions":{"codeList":["Female","Male","Other","Unknown"]},"valueType":"string","meta":{"displayName":"Gender of Relative"}},"age_of_relative_at_diagnosis":{"changeType":"created","description":"The age (in years) when the donor's relative was first diagnosed. (Reference: caDSR CDE ID 5300571)","name":"age_of_relative_at_diagnosis","restrictions":{"script":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n\r\n      const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\r\n      if ($row.relative_with_cancer_history != null) {\r\n         const relativeWithCancerHistory = $row.relative_with_cancer_history.trim().toLowerCase();\r\n         if (((relativeWithCancerHistory === \"no\") || (relativeWithCancerHistory === \"unknown\")) && currField != null) {\r\n            result = {\r\n               valid: false,\r\n               message: `The '${$name}' field should not be submitted if the 'relative_with_cancer_history' field is '${relativeWithCancerHistory}'`,\r\n            };\r\n         }\r\n      }\r\n      else {\r\n         if (currField || currField != null) {\r\n            result = { valid: false, message: `The 'relative_with_cancer_history' field must be submitted as 'Yes' if the '${$name}' field is submitted.`};\r\n         }\r\n      }\r\n      return result;\r\n  })"]},"valueType":"integer","meta":{"dependsOn":"family_history.relative_with_cancer_history","displayName":"Age Of Relative At Diagnosis"}},"cancer_type_code_of_relative":{"changeType":"created","name":"cancer_type_code_of_relative","valueType":"string","description":"The code to describe the malignant diagnosis of the donor's relative with a history of cancer using the WHO ICD-10 code (https://icd.who.int/browse10/2019/en) classification.","restrictions":{"regex":"^[C|D][0-9]{2}(.[0-9]{1,3}[A-Z]{0,1})?$","script":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n\r\n      const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\r\n      if ($row.relative_with_cancer_history != null) {\r\n         const relativeWithCancerHistory = $row.relative_with_cancer_history.trim().toLowerCase();\r\n         if (((relativeWithCancerHistory === \"no\") || (relativeWithCancerHistory === \"unknown\")) && currField != null) {\r\n            result = {\r\n               valid: false,\r\n               message: `The '${$name}' field should not be submitted if the 'relative_with_cancer_history' field is '${relativeWithCancerHistory}'`,\r\n            };\r\n         }\r\n      }\r\n      else {\r\n         if (currField || currField != null) {\r\n            result = { valid: false, message: `The 'relative_with_cancer_history' field must be submitted as 'Yes' if the '${$name}' field is submitted.`};\r\n         }\r\n      }\r\n      return result;\r\n  })"]},"meta":{"examples":"C41.1,C16.9,C00.5,D46.9","dependsOn":"family_history.relative_with_cancer_history","displayName":"Cancer Type Code (ICD-10) of Relative"}},"relative_vital_status":{"changeType":"created","description":"Relative's last known state of living or deceased.","name":"relative_vital_status","restrictions":{"codeList":["Alive","Deceased","Unknown"]},"valueType":"string","meta":{"displayName":"Vital Status of Relative"}},"cause_of_death_of_relative":{"changeType":"created","description":"Indicate the cause of the death of the relative.","name":"cause_of_death_of_relative","restrictions":{"codeList":["Died of cancer","Died of other reasons","Unknown"],"script":["(function validate(inputs) {\r\n        const {$row, $name, $field} = inputs;\r\n        let result = {valid: true, message: \"Ok\"};\r\n        \r\n        if ($row.relative_vital_status && $row.relative_vital_status != null) {\r\n           const vitalStatus = $row.relative_vital_status.trim().toLowerCase();\r\n           if (($field || $field != null) && (vitalStatus === \"alive\" || vitalStatus === \"unknown\")) {\r\n              result = {valid: false, message: `The '${$name}' field cannot be submitted if the relative's vital_status is '${vitalStatus}'.`}\r\n           }\r\n        }\r\n        else {\r\n           if ($field || $field != null) {\r\n              result = {valid: false, message: `The 'relative_vital_status' field must be submitted as 'deceased' if the '${$name}' field is submitted.` }\r\n           }\r\n        }\r\n        return result;\r\n    })"]},"valueType":"string","meta":{"dependsOn":"family_history.relative_vital_status","displayName":"Cause of Death of Relative"}},"relative_survival_time":{"changeType":"created","description":"Indicate how long, in days, the relative survived from the time they were diagnosed with cancer.","name":"relative_survival_time","restrictions":{"script":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n\r\n      const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\r\n      if ($row.relative_with_cancer_history != null) {\r\n         const relativeWithCancerHistory = $row.relative_with_cancer_history.trim().toLowerCase();\r\n         if (((relativeWithCancerHistory === \"no\") || (relativeWithCancerHistory === \"unknown\")) && currField != null) {\r\n            result = {\r\n               valid: false,\r\n               message: `The '${$name}' field should not be submitted if the 'relative_with_cancer_history' field is '${relativeWithCancerHistory}'`,\r\n            };\r\n         }\r\n      }\r\n      else {\r\n         if (currField || currField != null) {\r\n            result = { valid: false, message: `The 'relative_with_cancer_history' field must be submitted as 'Yes' if the '${$name}' field is submitted.`};\r\n         }\r\n      }\r\n      return result;\r\n  })"]},"valueType":"integer","meta":{"dependsOn":"family_history.relative_with_cancer_history","units":"days","displayName":"Survival Time Of Relative"}}},"deleted":{}},"comorbidity":{"updated":{},"created":{"program_id":{"changeType":"created","name":"program_id","valueType":"string","description":"Unique identifier of the ARGO program.","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.program_id","displayName":"Program ID"},"restrictions":{"required":true}},"submitter_donor_id":{"changeType":"created","name":"submitter_donor_id","valueType":"string","description":"Unique identifier of the donor, assigned by the data provider.","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.submitter_donor_id","displayName":"Submitter Donor ID"},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,64}"}},"prior_malignancy":{"changeType":"created","name":"prior_malignancy","description":"Prior malignancy affecting donor.","restrictions":{"codeList":["Yes","No","Unknown"]},"valueType":"string","meta":{"displayName":"Prior Malignancy"}},"laterality_of_prior_malignancy":{"changeType":"created","name":"laterality_of_prior_malignancy","description":"If donor has history of prior malignancy, indicate laterality of previous diagnosis. (Reference: caDSR CDE ID 4122391)","valueType":"string","restrictions":{"codeList":["Bilateral","Left","Midline","Not applicable","Right","Unilateral, Side not specified","Unknown"],"script":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n\r\n      \r\n      /* checks for a string just consisting of whitespace */\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n      const invalidTypes = [\"no\", \"unknown\"]\r\n   \r\n      if ($name === \"laterality_of_prior_malignancy\" && $row.laterality_of_prior_malignancy && $row.laterality_of_prior_malignancy != null && !(checkforEmpty($row.laterality_of_prior_malignancy))) {\r\n         if (!$row.prior_malignancy || $row.prior_malignancy === null || checkforEmpty($row.prior_malignancy) || invalidTypes.includes($row.prior_malignancy.trim().toLowerCase())) {\r\n            result = {valid: false, message: `The 'prior_malignancy' field should be submitted as 'Yes' if the '${$name}' field is submitted.`};\r\n         }\r\n      }\r\n      return result;\r\n  })"]},"meta":{"dependsOn":"comorbidity.prior_malignancy","displayName":"Laterality at Prior Malignancy"}},"age_at_comorbidity_diagnosis":{"changeType":"created","name":"age_at_comorbidity_diagnosis","valueType":"integer","description":"Indicate the age of comorbidity diagnosis, in years.","restrictions":{"script":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n\r\n      \r\n      /* checks for a string just consisting of whitespace */\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n      const invalidTypes = [\"no\", \"unknown\"]\r\n      optionalFields = [\"age_at_comorbidity_diagnosis\", \"comorbidity_treatment_status\", \"comorbidity_treatment\"];\r\n   \r\n      if (optionalFields.includes($name) && ($field || (!(checkforEmpty($field))))) {\r\n         if (($row.comorbidity_type_code === null || checkforEmpty($row.comorbidity_type_code))) {\r\n            result = { valid: false, message: `The 'comorbidity_type_code' field is required if '${$name}' is submitted.`};\r\n         }\r\n         if ($name === \"comorbidity_treatment\" && $field && !(checkforEmpty($field))) {\r\n            if (!$row.comorbidity_treatment_status || $row.comorbidity_treatment_status === null || checkforEmpty($row.comorbidity_treatment_status) || invalidTypes.includes($row.comorbidity_treatment_status.trim().toLowerCase())) {\r\n               result = { valid: false, message: `The 'comorbidity_treatment_status' field should be submitted as 'Yes' if '${$name}' field is submitted.`};\r\n            }\r\n         }\r\n     }\r\n     return result;\r\n  })"],"range":{"exclusiveMin":0}},"meta":{"units":"years","dependsOn":"comorbidity.comorbidity_type_code","displayName":"Age at Comorbidity Diagnosis"}},"comorbidity_type_code":{"changeType":"created","name":"comorbidity_type_code","valueType":"string","description":"Indicate the code for the comorbidity using the WHO ICD-10 code classification (https://icd.who.int/browse10/2019/en).","restrictions":{"required":true,"script":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      \r\n      /* checks for a string just consisting of whitespace */\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n      const invalidTypes = [\"no\", \"unknown\"]\r\n      /* check if ICD-10 code is for neoplasms */\r\n      const neoplasmCode = (entry) => {return /^[C|D][0-9]{2}(.[0-9]{1,3}[A-Z]{0,1})?$/.test(decodeURI(entry))};\r\n\r\n    \r\n      if (neoplasmCode($row.comorbidity_type_code)) { \r\n         if (!$row.prior_malignancy || $row.prior_malignancy === null || checkforEmpty($row.prior_malignancy) || invalidTypes.includes($row.prior_malignancy.trim().toLowerCase())) {\r\n           result = {valid: false, message: `If an ICD-10 code for cancer is submitted in the '${$name}' field, then 'prior_malignancy' should be submitted as 'Yes'.`}\r\n         }\r\n      }\r\n      else if ($row.prior_malignancy && $row.prior_malignancy != null && !(checkforEmpty($row.prior_malignancy)) && $row.prior_malignancy.trim().toLowerCase() === \"yes\" && (!(neoplasmCode($row.comorbidity_type_code)))) {\r\n        result = {valid: false, message: `If the 'prior_malignancy' field is submitted as 'Yes', then an ICD-10 code for cancer is expected in the '${$name}' field.`}\r\n      }\r\n      return result;\r\n  })"],"regex":"^[A-Z][0-9]{2}(.[0-9]{1,3}[A-Z]{0,1})?$"},"meta":{"primaryId":true,"dependsOn":"comorbidity.prior_malignancy","examples":"E10, C50.1, I11, M06","displayName":"Comorbidity Type Code"}},"comorbidity_treatment_status":{"changeType":"created","name":"comorbidity_treatment_status","valueType":"string","description":"Indicate if the patient is being treated for the comorbidity (this includes prior malignancies).","restrictions":{"codeList":["Yes","No","Unknown"],"script":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n\r\n      \r\n      /* checks for a string just consisting of whitespace */\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n      const invalidTypes = [\"no\", \"unknown\"]\r\n      optionalFields = [\"age_at_comorbidity_diagnosis\", \"comorbidity_treatment_status\", \"comorbidity_treatment\"];\r\n   \r\n      if (optionalFields.includes($name) && ($field || (!(checkforEmpty($field))))) {\r\n         if (($row.comorbidity_type_code === null || checkforEmpty($row.comorbidity_type_code))) {\r\n            result = { valid: false, message: `The 'comorbidity_type_code' field is required if '${$name}' is submitted.`};\r\n         }\r\n         if ($name === \"comorbidity_treatment\" && $field && !(checkforEmpty($field))) {\r\n            if (!$row.comorbidity_treatment_status || $row.comorbidity_treatment_status === null || checkforEmpty($row.comorbidity_treatment_status) || invalidTypes.includes($row.comorbidity_treatment_status.trim().toLowerCase())) {\r\n               result = { valid: false, message: `The 'comorbidity_treatment_status' field should be submitted as 'Yes' if '${$name}' field is submitted.`};\r\n            }\r\n         }\r\n     }\r\n     return result;\r\n  })"]},"meta":{"dependsOn":"comorbidity.comorbidity_type_code","displayName":"Comorbidity Treatment"}},"comorbidity_treatment":{"changeType":"created","name":"comorbidity_treatment","valueType":"string","description":"Indicate treatment details for the comorbidity (this includes prior malignancies).","restrictions":{"script":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n\r\n      \r\n      /* checks for a string just consisting of whitespace */\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n      const invalidTypes = [\"no\", \"unknown\"]\r\n      optionalFields = [\"age_at_comorbidity_diagnosis\", \"comorbidity_treatment_status\", \"comorbidity_treatment\"];\r\n   \r\n      if (optionalFields.includes($name) && ($field || (!(checkforEmpty($field))))) {\r\n         if (($row.comorbidity_type_code === null || checkforEmpty($row.comorbidity_type_code))) {\r\n            result = { valid: false, message: `The 'comorbidity_type_code' field is required if '${$name}' is submitted.`};\r\n         }\r\n         if ($name === \"comorbidity_treatment\" && $field && !(checkforEmpty($field))) {\r\n            if (!$row.comorbidity_treatment_status || $row.comorbidity_treatment_status === null || checkforEmpty($row.comorbidity_treatment_status) || invalidTypes.includes($row.comorbidity_treatment_status.trim().toLowerCase())) {\r\n               result = { valid: false, message: `The 'comorbidity_treatment_status' field should be submitted as 'Yes' if '${$name}' field is submitted.`};\r\n            }\r\n         }\r\n     }\r\n     return result;\r\n  })"]},"meta":{"dependsOn":"comorbidity.comorbidity_treatment_status","displayName":"Comorbidity Treatment Type"}}},"deleted":{}}}}
